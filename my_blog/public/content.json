{"meta":{"title":"Fxj","subtitle":null,"description":null,"author":"FanMing","url":"http://fanming.shop"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2018-01-16T09:10:26.374Z","updated":"2018-01-16T09:10:26.374Z","comments":false,"path":"/404.html","permalink":"http://fanming.shop//404.html","excerpt":"","text":""},{"title":"关于","date":"2018-01-16T09:10:26.386Z","updated":"2018-01-16T09:10:26.386Z","comments":false,"path":"about/index.html","permalink":"http://fanming.shop/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2018-01-16T09:10:26.386Z","updated":"2018-01-16T09:10:26.386Z","comments":false,"path":"categories/index.html","permalink":"http://fanming.shop/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2018-01-16T09:10:26.366Z","updated":"2018-01-16T09:10:26.366Z","comments":false,"path":"books/index.html","permalink":"http://fanming.shop/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-01-16T09:10:26.390Z","updated":"2018-01-16T09:10:26.390Z","comments":true,"path":"links/index.html","permalink":"http://fanming.shop/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2018-01-16T09:10:26.390Z","updated":"2018-01-16T09:10:26.390Z","comments":false,"path":"repository/index.html","permalink":"http://fanming.shop/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-01-16T09:10:26.394Z","updated":"2018-01-16T09:10:26.394Z","comments":false,"path":"tags/index.html","permalink":"http://fanming.shop/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"git","date":"2018-01-17T07:55:34.251Z","updated":"2018-01-17T07:55:34.251Z","comments":true,"path":"2018/01/17/git/","link":"","permalink":"http://fanming.shop/2018/01/17/git/","excerpt":"","text":"hello","categories":[],"tags":[]},{"title":"Python和微信之获取好友昵称并制作wordcloud","slug":"hexo_config","date":"2018-01-16T09:49:54.921Z","updated":"2018-01-16T09:49:54.897Z","comments":true,"path":"2018/01/16/hexo_config/","link":"","permalink":"http://fanming.shop/2018/01/16/hexo_config/","excerpt":"","text":"最近看到网上有人用Python获取微信的一些信息，感觉挺有意思，对于我一个Python刚入门的人来说，正需要一些代码片段来激起我的兴趣，所以自己也写了一些，废话不多说，直接上代码！！！ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152coding:utf-8微信好友昵称WordCloudimport itchatimport reimport osimport matplotlib.pyplot as pltfrom wordcloud import WordCloud, ImageColorGeneratorimport numpy as npimport PIL.Image as Imageimport jiebaimport time#以上是我用到的一些库，这些根据个人不同需要安装某些库#运行到此处会自动生成一个二维码，打开手机微信，扫一扫即可登录itchat.login() friends = itchat.get_friends(update=True)[0:]tList = []for i in friends: #用正则表达式过滤掉 span ，class，emoji。NickName表示微信好友的昵称； signature = i[&quot;NickName&quot;].strip().replace(&quot;span&quot;,&quot;&quot;).replace(&quot;class&quot;,&quot;&quot;).replace(&quot;emoji&quot;,&quot;&quot;) rep = re.compile(&quot;1f\\d.+&quot;) signature = rep.sub(&quot;&quot;,signature) print signature tList.append(signature)#拼接字符串text = &quot;&quot;.join(tList)#jieba分词wordlist_jieba = jieba.cut(text,cut_all=True)wl_space_split = &quot; &quot;.join(wordlist_jieba)#wordcloudd = os.path.dirname(__file__)alice_coloring = np.array(Image.open(os.path.join(d,&quot;hot.png&quot;))) #设置一个背景图片，文章中会附上my_wordcloud = WordCloud(background_color=&quot;white&quot;,max_words=2000,mask=alice_coloring,max_font_size=37, random_state=42,font_path=&quot;./handan.ttf&quot;).generate(wl_space_split) #此处使用的字体一定是支持中文的字体，当然，如果你确定你好友的昵称都是英文，那么请忽略，字体的路径可以是相对路径，也可以是你的系统字体image_colors = ImageColorGenerator(alice_coloring)plt.imshow(my_wordcloud.recolor(color_func=image_colors))plt.imshow(my_wordcloud)plt.axis(&quot;off&quot;)plt.show()time.sleep(3)plt.close() #图片关闭后将图片发送至手机,保存图片，并发送至手机my_wordcloud.to_file(os.path.join(d, &quot;wechat_cloud.png&quot;))itchat.send_image(&quot;wechat_cloud.png&quot;, &apos;filehelper&apos;) 至此，打开你的手机，进入到文件传输助手，你会收到一张图片，这就是使用微信好友昵称制作的词云，下面附上一张我本人的","categories":[{"name":"python","slug":"python","permalink":"http://fanming.shop/categories/python/"}],"tags":[{"name":"wordcloud","slug":"wordcloud","permalink":"http://fanming.shop/tags/wordcloud/"}]},{"title":"python爬虫爬取ajax加载的动态内容","slug":"python_pachong","date":"2017-11-19T15:20:00.000Z","updated":"2018-01-17T02:29:35.568Z","comments":true,"path":"2017/11/19/python_pachong/","link":"","permalink":"http://fanming.shop/2017/11/19/python_pachong/","excerpt":"","text":"在使用python爬取网页内容的时候，发现请求到的内容和浏览器开发者工具上看到的不一样，经过一番百度，才发现该内容是使用ajax加载的内容： 两处相差甚远。 最终在这里找到ajax请求的url 使用此地址完美请求到缺失的数据","categories":[{"name":"python","slug":"python","permalink":"http://fanming.shop/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://fanming.shop/tags/python/"}]},{"title":"python使用爬虫获取json格式的网页，输出以及写入文件乱码","slug":"pachong_luanma","date":"2017-11-19T14:13:00.000Z","updated":"2018-01-17T02:27:48.042Z","comments":true,"path":"2017/11/19/pachong_luanma/","link":"","permalink":"http://fanming.shop/2017/11/19/pachong_luanma/","excerpt":"","text":"解决python使用爬虫获取json格式的网页，输出以及写入文件乱码的情况 1234567891011import codecsresp = requests.get(url,headers=headers)result = json.dumps(resp.json(),ensure_ascii=False)#若不指定ensure_ascii=False，输出的是中文的ascii 字符码，而不是真正的中文。#这是因为json.dumps 序列化时对中文默认使用的ascii编码.想输出真正的中文需要指定ensure_ascii=False：file1 = codecs.open(date+&quot;liujiqian.txt&quot;,&apos;a&apos;,&apos;utf-8&apos;) #将获取到的内容写到文件，以指定的编码方式打开文件，这样才能正常写入中文file1.write(result)file1.close()","categories":[{"name":"python","slug":"python","permalink":"http://fanming.shop/categories/python/"}],"tags":[{"name":"scarpy","slug":"scarpy","permalink":"http://fanming.shop/tags/scarpy/"}]},{"title":"linux中使用touch修改文件的时间","slug":"linux_touch_time","date":"2017-04-02T11:04:11.000Z","updated":"2018-01-17T03:04:39.101Z","comments":true,"path":"2017/04/02/linux_touch_time/","link":"","permalink":"http://fanming.shop/2017/04/02/linux_touch_time/","excerpt":"","text":"liunx中使用touch命令更改文件的时间 首先介绍下Linux系统中文件的三个时间 1）modification time (mtime,修改时间)：这个时间指的是文件内容修改的时间，而不是文件属性的修改，当数据内容修改时，这个时间就会改变，用命令ls -l默认显示的就是这个时间。 2）status time （ctime,状态时间）：当一个文件的状态改变时，这个时间就会改变，例如更改了文件的权限与属性等，它就会改变。 3）access time （atime,访问时间）：当读取文件内容时，就会更改这个时间，例如使用cat 去读取/etc/man.config,那么该文件的atime就会改变。 touch的用法为： touch [-actmd] 文件 参数： -a:仅修改access time -c:仅修改时间而不建立文件 -t:后面可以接时间，格式为：[[CC]YY]MMDDhhmm [.SS] *该参数修改的是访问时间和修改时间* CC - 年份的前两位 YY - 年份的后两位 MM - 月份 [01-12] DD - 日期 [01-31] hh - 时 [00-23] mm - 分 [00-59] SS - 秒 [00-61] -m:仅修改mtime -d:后面可以接日期，也可以使用--date=&quot;日期或时间&quot;","categories":[{"name":"linux","slug":"linux","permalink":"http://fanming.shop/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://fanming.shop/tags/linux/"}]},{"title":"centos环境下使用uwsgi&nginx部署flask","slug":"部署flask","date":"2017-03-08T07:50:23.000Z","updated":"2018-01-17T09:45:45.600Z","comments":true,"path":"2017/03/08/部署flask/","link":"","permalink":"http://fanming.shop/2017/03/08/部署flask/","excerpt":"","text":"安装Python虚拟环境 在centos中，系统已经集成了Python环境，直接可以使用，不用手动安装。 1）pip install virtualenv 进行这一步要保证pip可以使用 若在此报错gcc，则需要安装python-devel 2）virtualenv name ——————创建虚拟环境 3）source name/activate ————激活虚拟环境 4）根据flask项目中需要的Python包安装 安装uwsgi 1）pip install uwsgi 2）在项目的根目录创建文件名为config.ini文件，用于启动uwsgi 123456789101112131415161718[uwsgi]socket = 127.0.0.1:5001 //启动程序时所使用的地址和端口，通常在本地运行flask项目， //地址和端口是127.0.0.1:5000, //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目， //也就是说启动了uwsgi，也就启动了项目。chdir = /root/pyenv/AjaxExample //项目目录wsgi-file = run.py //flask程序的启动文件，通常在本地是通过运行 //python run.py 来启动项目的 callable = app //程序内启用的application变量名processes = 4 //处理器个数threads = 2 //线程个数stats = 127.0.0.1:9191 //获取uwsgi统计信息的服务地址 用于和nginx通信 安装nginx *nginx的一些命令 *启动： nginx *停止： nginx -s -stop *强制停止： pkill -9 nginx *查看nginx是否应用配置文件: nginx -t *查看版本： nginx -v 1）nginx 可以使用yum直接安装 yum install yum-fastestmirror————安装源 yum install nginx 2）配置nginx 配置文件默认在/etc/nginx/nginx.conf 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849user nginx;worker_processes auto;error_log /var/log/nginx/error.log; //错误日志pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server &#123; listen 80 default_server; //web服务端口 listen [::]:80 default_server; server_name 39.106.56.137; //公网ip root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; include uwsgi_params; uwsgi_pass 127.0.0.1:5001; //需要和uwsgi的配置文件里socket项的地址 //相同,否则无法让uwsgi接收到请求。 uwsgi_param UWSGI_PYHOME /root/pyenv; //python的位置(虚拟环境下) uwsgi_param UWSGI_CHDIR /root/pyenv/AjaxExample; //项目根目录 uwsgi_param UWSGI_SCRIPT run:app; //启动项目的主程序(在本地上运行 //这个主程序可以在flask内置的 //服务器上访问你的项目) &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;&#125; 至此，各项配置已经完成，不出意外的话，你就可以在浏览器中访问你的网站了","categories":[{"name":"linux","slug":"linux","permalink":"http://fanming.shop/categories/linux/"}],"tags":[{"name":"flask","slug":"flask","permalink":"http://fanming.shop/tags/flask/"}]}]}