{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/GNAME","path":"GNAME","modified":0,"renderable":0},{"_id":"themes/pure_me/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure_me/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure_me/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure_me/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure_me/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure_me/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure_me/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure_me/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure_me/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure_me/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure_me/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure_me/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/donate/alipay.jpg","path":"images/donate/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/donate/weipay.jpg","path":"images/donate/weipay.jpg","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/donate/weipayimg.png","path":"images/donate/weipayimg.png","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure_me/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/GNAME","hash":"16793b6e4a8fdb039ae8b5c8431ce736b67094f1","modified":1516093826410},{"_id":"themes/pure_me/_config.yml","hash":"fdfad3254c11733479ce0162384c506ea15a266c","modified":1516762765537},{"_id":"themes/pure_me/_config.yml.example","hash":"8188c5872beda57fd165bf5adcea3b648f7e6780","modified":1516762765541},{"_id":"themes/pure_me/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1516762765553},{"_id":"source/404/index.md","hash":"1205cc8564e2e824e7c2940045abca83d8e09f0d","modified":1516093826374},{"_id":"source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1516093826386},{"_id":"source/_posts/centos7InstallNagios.md","hash":"1f6a4ed9ea0e7d49f271a3ffedbe909963dea534","modified":1516850916416},{"_id":"source/_posts/hexo_question.md","hash":"35de75c1f27a291731af0df5cdf84d2557c37152","modified":1516765440181},{"_id":"source/_posts/linux_touch_time.md","hash":"c4749976e03d8b2eff12273a1412a3b342274788","modified":1516158279101},{"_id":"source/_posts/pachong_luanma.md","hash":"b5c2b82e4812fc789ecfae2175c132e7f6dcc8ce","modified":1516156068042},{"_id":"source/_posts/pythonWechatWordCloud.md","hash":"4f252ded53616a028ace8090ba2aab2569f07a0f","modified":1516766313598},{"_id":"source/_posts/python_pachong.md","hash":"a7f810e16c07401df68786609cb061e2885b45c1","modified":1516156175568},{"_id":"source/_posts/windowsNagios.md","hash":"f49e03a2635c9946f1a62b38c963542ccfdb3226","modified":1516945127087},{"_id":"source/_posts/部署flask.md","hash":"ee33a589aaa2faee68b2525421ad807d15d1bc09","modified":1516758738868},{"_id":"source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1516093826366},{"_id":"source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1516093826386},{"_id":"source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1516093826390},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1516093826390},{"_id":"source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1516093826394},{"_id":"themes/pure_me/languages/default.yml","hash":"85fe624fee25fe9871c8d9f10feda77c9ca8b4a7","modified":1516762765541},{"_id":"themes/pure_me/languages/en.yml","hash":"85fe624fee25fe9871c8d9f10feda77c9ca8b4a7","modified":1516762765541},{"_id":"themes/pure_me/languages/zh-CN.yml","hash":"5474cc8184a7f4709c540a284b9acdff43d4a71b","modified":1516762765541},{"_id":"themes/pure_me/languages/zh-TW.yml","hash":"2422a43236e5dad1c6d17e401e4e820a385e9666","modified":1516762765541},{"_id":"themes/pure_me/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1516762765549},{"_id":"themes/pure_me/layout/archive.ejs","hash":"90fa5b0d8f081d0bde33b2784f66e6a80e5b0dac","modified":1516762765549},{"_id":"themes/pure_me/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1516762765549},{"_id":"themes/pure_me/layout/categories.ejs","hash":"2adc0847776437f583f5222195462ec54bb21abf","modified":1516762765549},{"_id":"themes/pure_me/layout/category.ejs","hash":"6e7024e5099dff8bc803b327a5683a93e248460f","modified":1516762765549},{"_id":"themes/pure_me/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1516762765549},{"_id":"themes/pure_me/layout/layout.ejs","hash":"46efc1b25a9950bf37220820230ba05e1da8b564","modified":1516762765549},{"_id":"themes/pure_me/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1516762765553},{"_id":"themes/pure_me/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1516762765553},{"_id":"themes/pure_me/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1516762765553},{"_id":"themes/pure_me/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1516762765553},{"_id":"themes/pure_me/layout/tag.ejs","hash":"643b4edaf27dea7c3da262fe69c85e056a2c68ec","modified":1516762765553},{"_id":"themes/pure_me/layout/tags.ejs","hash":"cade9f903fb1f47ff0c8ff2c42875a0af26cfd76","modified":1516762765553},{"_id":"themes/pure_me/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1516762765561},{"_id":"themes/pure_me/source/favicon.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1516762765561},{"_id":"themes/pure_me/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1516762765553},{"_id":"themes/pure_me/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1516762765553},{"_id":"themes/pure_me/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1516762765553},{"_id":"themes/pure_me/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1516762765553},{"_id":"themes/pure_me/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1516762765553},{"_id":"themes/pure_me/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1516762765565},{"_id":"themes/pure_me/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1516762765565},{"_id":"themes/pure_me/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1516762765565},{"_id":"themes/pure_me/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1516762765565},{"_id":"themes/pure_me/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1516762765565},{"_id":"themes/pure_me/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1516762765565},{"_id":"themes/pure_me/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1516762765565},{"_id":"themes/pure_me/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1516762765565},{"_id":"themes/pure_me/_source/404/index.md","hash":"fb58a91d86a25a0b8798555899e847d237cf1b44","modified":1516762765565},{"_id":"themes/pure_me/layout/_common/footer.ejs","hash":"caec54ce31577207e1fd31aefa017bde99a8027c","modified":1516762765541},{"_id":"themes/pure_me/layout/_common/head.ejs","hash":"ebe13105099db22d00b43350467065841af82134","modified":1516762765541},{"_id":"themes/pure_me/layout/_common/header.ejs","hash":"1dbc6e7532a17981d7e28f86e2aae932f7c15961","modified":1516762765541},{"_id":"themes/pure_me/layout/_common/plugin.ejs","hash":"eaeb2f1f16a6e48c9c8d5f62af8891173d82c30d","modified":1516762765541},{"_id":"themes/pure_me/layout/_common/script.ejs","hash":"5cf5129affc7c5d0c5d5d5fba6d84ac8f9f86422","modified":1516762765541},{"_id":"themes/pure_me/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-book.ejs","hash":"8c8be1988c1d12f6e824e3b1de96bad23e19c3e0","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-list.ejs","hash":"e4810f8e03986d5a8afdf4c0932814a3d0db9ffe","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-repository.ejs","hash":"6408e37ec1a8ee868cf36d5b0e020d5d97ea2f27","modified":1516762765541},{"_id":"themes/pure_me/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/article.ejs","hash":"4fa4587a0fd8687ecc7a8e3ff9b12a607b3b7c29","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/item-post.ejs","hash":"402962ba1da10865045d8bc61d1a05f28af29b5b","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/pagination.ejs","hash":"9105ff88a6fa026e78541e608ebc02e355be26f5","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/sidebar-about.ejs","hash":"be30d7eb0b391759ac329b8a7b410d758ff8b032","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/sidebar-toc.ejs","hash":"335a906404dada013d83508244e992c7a26fa879","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/douban.ejs","hash":"1e4bad0e7d04352e3634994f413c16b0001efa4a","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/pv.ejs","hash":"b67f5d87bd9d53bc1a43da89b3bc32cc7d3d42d8","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/repository.ejs","hash":"6b5cc1ef09d1602a526d67ad7a8ba1c995fbb597","modified":1516762765549},{"_id":"themes/pure_me/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1516762765549},{"_id":"themes/pure_me/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1516762765549},{"_id":"themes/pure_me/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1516762765549},{"_id":"themes/pure_me/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1516762765549},{"_id":"themes/pure_me/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1516762765549},{"_id":"themes/pure_me/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1516762765549},{"_id":"themes/pure_me/layout/_widget/board.ejs","hash":"28c1059e922407051de9f369d09fe72b49915a3b","modified":1516762765549},{"_id":"themes/pure_me/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1516762765549},{"_id":"themes/pure_me/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1516762765549},{"_id":"themes/pure_me/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1516762765549},{"_id":"themes/pure_me/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1516762765549},{"_id":"themes/pure_me/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1516762765561},{"_id":"themes/pure_me/source/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1516762765561},{"_id":"themes/pure_me/source/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1516762765561},{"_id":"themes/pure_me/source/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1516762765561},{"_id":"themes/pure_me/source/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1516762765561},{"_id":"themes/pure_me/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1516762765565},{"_id":"themes/pure_me/source/js/application.js","hash":"637128440b40ceac55c74850f0e2648c647cd487","modified":1516762765565},{"_id":"themes/pure_me/source/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1516762765565},{"_id":"themes/pure_me/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1516762765565},{"_id":"themes/pure_me/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1516762765565},{"_id":"themes/pure_me/source/js/plugin.min.js","hash":"f41176dfdd685f68de6cba66fe500014a5342ce1","modified":1516762765565},{"_id":"themes/pure_me/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/comment.ejs","hash":"426855ae330ba403818170fac6e4ba89cc7f4c77","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/copyright.ejs","hash":"e2180ba37bd5ec5d774e50e49e48daf086676db6","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/donate.ejs","hash":"2c5ec5785f4abc08e081123848531c4912c65fd8","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/pv.ejs","hash":"29fa1058465c5e7ef5e707c2a85f874c95c07a84","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1516762765545},{"_id":"themes/pure_me/layout/_partial/post/nav.ejs","hash":"db441deadb5628c82bc5796e3238da9c77ba36ae","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/_analytics/script.ejs","hash":"9d8afb9316326dd4f2dc8d0489907a8c17887e34","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/_analytics/tencent-analytics.ejs","hash":"b425f8c174e8cc0853d6f9c095cf3c5ffcddb37e","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/_comment/gitment.ejs","hash":"4977930e0982a396c08a6712f19d2579ad2503dd","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/_comment/disqus.ejs","hash":"ef355fd33e4f2fa230769acb42c307fad0fffade","modified":1516762765545},{"_id":"themes/pure_me/layout/_script/_comment/livere.ejs","hash":"de7d9de6e7785a6ca9d00997a03a49d4752b5bb7","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/_comment/script.ejs","hash":"f81d2f4c93ce7ade17a3978b6b0cf2c8e1d80609","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/_comment/youyan.ejs","hash":"68ad92beaaffd863a473fea316cd2848561b5e9e","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1516762765549},{"_id":"themes/pure_me/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1516762765549},{"_id":"themes/pure_me/source/css/style.css","hash":"537ba2fff00ce31c432f4d32ee77c78010ceb022","modified":1516762765561},{"_id":"themes/pure_me/source/fonts/iconfont.svg","hash":"ea6a275273d7632734b320a55c825181fbfea81a","modified":1516762765561},{"_id":"themes/pure_me/source/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1516762765561},{"_id":"themes/pure_me/source/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1516762765561},{"_id":"themes/pure_me/source/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1516762765561},{"_id":"themes/pure_me/source/images/donate/weipayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1516762765565},{"_id":"themes/pure_me/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1516762765565},{"_id":"themes/pure_me/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1516762765565},{"_id":"themes/pure_me/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1516762765561},{"_id":"public/atom.xml","hash":"0a2b32bdc31381cb53fa8c19e09360ff0af135f4","modified":1516945140475},{"_id":"public/content.json","hash":"41779a1f7d0173421e3d8c27a8af832bb5915aef","modified":1516945141657},{"_id":"public/sitemap.xml","hash":"eeab949d2d511f04fdbe4dd98cc550e37ca5d04b","modified":1516945141681},{"_id":"public/links/index.html","hash":"b60c658270e16f4764b1aba64f1f1155ba28e747","modified":1516931063790},{"_id":"public/404.html","hash":"5f7ca9f4b032939d01e8a602afaa77993c018e4e","modified":1516931063791},{"_id":"public/about/index.html","hash":"1b7d8e14bd5b5dff27da90850f0196f454d9053e","modified":1516931063791},{"_id":"public/books/index.html","hash":"5cdeef7eb9f74e49633634e3c4e6f7e66d66f066","modified":1516931063791},{"_id":"public/categories/index.html","hash":"df8e9ec81c3383db64bec4289d632f1442f0dd49","modified":1516931063791},{"_id":"public/repository/index.html","hash":"723810829c48d48be43d540c98717e020585e081","modified":1516931063791},{"_id":"public/tags/index.html","hash":"2b1b36309fa5bf8c8ecb71b049fb77d241656b40","modified":1516931063792},{"_id":"public/2018/01/24/pythonWechatWordCloud/index.html","hash":"e4753dc05f7baf6600361412077baba7ce1d9064","modified":1516931063792},{"_id":"public/2017/11/19/python_pachong/index.html","hash":"3a11665861287c7878318570e0cb4349ecf2fffd","modified":1516931063792},{"_id":"public/2017/11/19/hexo_question/index.html","hash":"3f4627455a8f2138b1d0ce7e9547d18072b6e684","modified":1516931063792},{"_id":"public/2017/11/19/pachong_luanma/index.html","hash":"e92a9844ffcbb6a381a07274f8c8e6b1101eec3d","modified":1516931063792},{"_id":"public/2017/06/06/windowsNagios/index.html","hash":"4d8961b51c6b04fc679e982b021556b8fd311728","modified":1516945141698},{"_id":"public/2017/06/05/centos7InstallNagios/index.html","hash":"d690a743c45795e1892b0beddba282dbef1838d7","modified":1516931063793},{"_id":"public/2017/04/02/linux_touch_time/index.html","hash":"438887a7255ddd1dac3af3c2f3da833412b5f909","modified":1516931063793},{"_id":"public/2017/03/08/部署flask/index.html","hash":"0a94ecd98b6772d22f2e8561e99fbb568649bd87","modified":1516931063793},{"_id":"public/archives/index.html","hash":"6fd8866612b67a52568539af20bf3b4dba28d235","modified":1516931063793},{"_id":"public/archives/2017/index.html","hash":"ae4cdcb6aadb9b0de59dd08548b3cd14bc1feede","modified":1516931063794},{"_id":"public/archives/2017/03/index.html","hash":"4922474e1ed3ee61e952c043b9f58c57676969f8","modified":1516931063794},{"_id":"public/archives/2017/04/index.html","hash":"ad5a87b3745fbfd430c7db53b49f9e1423b20f94","modified":1516931063794},{"_id":"public/archives/2017/06/index.html","hash":"79deedd23b2eb09941a8fcad1b8411d4a11f3fe4","modified":1516931063794},{"_id":"public/archives/2017/11/index.html","hash":"fc6fd931de07b8326846edd5a2a2ad9e1de7bbf2","modified":1516931063794},{"_id":"public/archives/2018/index.html","hash":"937279e616b6507fedcaee69df5d02eedcfdc6a4","modified":1516931063794},{"_id":"public/archives/2018/01/index.html","hash":"c15b3c22da3203ddddd0b9b5bbaca2173a29598d","modified":1516931063795},{"_id":"public/categories/linux/index.html","hash":"f1a9b706bcc7a2d00d136e50d3390ea6a2a27b79","modified":1516931063795},{"_id":"public/categories/python/index.html","hash":"28b95fb1f6589615111e56c989643d2dc910e0de","modified":1516931063795},{"_id":"public/categories/nagios/index.html","hash":"2b4774492bb8ed7c7b103e305b281adc9ccf7db5","modified":1516931063795},{"_id":"public/index.html","hash":"8e65584dd4b32c36b933cd659f7dd1490b828cef","modified":1516938749671},{"_id":"public/categories/hexo/index.html","hash":"a500bd0ab4824606f9c96f1c157d1d740cb13836","modified":1516931063796},{"_id":"public/tags/linux/index.html","hash":"b7f0273d6d0c3ceef0550078f2f1d5935a9b0705","modified":1516931063796},{"_id":"public/tags/hexo/index.html","hash":"edb5125b53e38e5436c2013195fd547405486add","modified":1516931063796},{"_id":"public/tags/nagios/index.html","hash":"85142259788b1b8b2b50a85abe407ba66c97cd3a","modified":1516931063797},{"_id":"public/tags/wordcloud/index.html","hash":"8406fa81df21eeea4264a16b5d14c25d49351dc0","modified":1516931063798},{"_id":"public/tags/scarpy/index.html","hash":"ad4169467062837fb4064acb5f4e7a5c83993daf","modified":1516931063798},{"_id":"public/tags/python/index.html","hash":"2d4cac241833c208307a8cca26c6b900040a883a","modified":1516931063798},{"_id":"public/tags/flask/index.html","hash":"07ad8bba08f6b9cd88d6fdffe8413dea17183317","modified":1516931063798},{"_id":"public/tags/windows/index.html","hash":"6eb80da554b0219b88436e634c9a1cf139b253c4","modified":1516931063798},{"_id":"public/GNAME","hash":"16793b6e4a8fdb039ae8b5c8431ce736b67094f1","modified":1516931063828},{"_id":"public/favicon.png","hash":"79a9b4f6161f153208b02246c326eecf3095e79d","modified":1516931063828},{"_id":"public/fonts/iconfont.eot","hash":"6c0c276a9ce023d569208e69e642583562745810","modified":1516931063829},{"_id":"public/fonts/iconfont.ttf","hash":"c27cba6f2d2710c677f79fbe59480ec0c3535875","modified":1516931063830},{"_id":"public/images/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1516931063836},{"_id":"public/fonts/iconfont.woff","hash":"9e4123792f885b8e61c916b0a8f5e6176f916945","modified":1516931063836},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1516931063836},{"_id":"public/images/donate/alipay.jpg","hash":"8a5b2c72ddb7396adb709771a35ef50b8cf5485e","modified":1516931063837},{"_id":"public/images/donate/alipayimg.png","hash":"9562f23f2eb57841c65dc769b6cc43a2cf0efa94","modified":1516931063837},{"_id":"public/images/donate/weipay.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1516931063837},{"_id":"public/images/donate/weipayimg.png","hash":"c0844d9a633696cb00ae64fde06f0f924f63b596","modified":1516931063837},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1516931063838},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1516931063839},{"_id":"public/fonts/README.html","hash":"43b6265aeccff3f9d495e2b44d07b249a2197bd7","modified":1516931063863},{"_id":"public/js/application.js","hash":"cd1b8d06880ab1b80d45c8f53b53a23b6b8fb7ac","modified":1516931063863},{"_id":"public/js/application.min.js","hash":"e5ae432339928ee0166ec444bcc5e12065944f3d","modified":1516931063864},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1516931063864},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1516931063864},{"_id":"public/js/plugin.min.js","hash":"7970a38501066965aae8272299ccd0bcb1614d30","modified":1516931063864},{"_id":"public/css/style.css","hash":"75aa14bc1efb820db46c3eb0b9a33811cbd4f024","modified":1516931063864},{"_id":"public/fonts/iconfont.svg","hash":"ea6a275273d7632734b320a55c825181fbfea81a","modified":1516931063865}],"Category":[{"name":"linux","_id":"cjcv9l4h000048e9o3hhavjga"},{"name":"hexo","_id":"cjcv9l4j7000c8e9o3j9g2ii6"},{"name":"python","_id":"cjcv9l4ko000o8e9ot6mivhlg"},{"name":"nagios","_id":"cjcv9l4lf00118e9ozarxgfn4"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://blog.cofess.com\" homePageName=\"回到我的主页\"></script>\n","date":"2018-01-16T09:10:26.374Z","updated":"2018-01-16T09:10:26.374Z","path":"/404.html","layout":"page","_id":"cjcv9l4f900008e9o3g2680ip","content":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n","site":{"data":{}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.cofess.com\" homepagename=\"回到我的主页\"></script>\n"},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":"个人详细介绍","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n个人详细介绍","date":"2018-01-16T09:10:26.386Z","updated":"2018-01-16T09:10:26.386Z","path":"about/index.html","_id":"cjcv9l4gh00028e9ok6gk2kks","content":"<p>个人详细介绍</p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人详细介绍</p>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2018-01-16T09:10:26.366Z","updated":"2018-01-16T09:10:26.366Z","path":"books/index.html","_id":"cjcv9l4hi00068e9oeeu1pvkg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2018-01-16T09:10:26.386Z","updated":"2018-01-16T09:10:26.386Z","path":"categories/index.html","_id":"cjcv9l4hw00088e9ozse0ulul","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2018-01-16T09:10:26.390Z","updated":"2018-01-16T09:10:26.390Z","path":"links/index.html","_id":"cjcv9l4iw000a8e9ohhq5kf8l","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2018-01-16T09:10:26.390Z","updated":"2018-01-16T09:10:26.390Z","path":"repository/index.html","_id":"cjcv9l4jd000e8e9o5kbg451h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2018-01-16T09:10:26.394Z","updated":"2018-01-16T09:10:26.394Z","path":"tags/index.html","_id":"cjcv9l4jr000g8e9osxy67dke","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"date":"2017-06-05T14:34:45.000Z","title":"nagios监控（一）之centos7安装nagios监控服务","_content":"\n**1. nagios简介**\n---------------\n\n \n\t\tNagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。\n\t\t    \n\t\tNagios 可以监控的功能有：\n\t\t1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； \n\t\t2、监控主机资源（处理器负荷、磁盘利用率等）；\n\t\t3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法；\n\t\t4、并行服务检查机制；\n\t\t5、具备定义网络分层结构的能力，用\"parent\"主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态；\n\t\t6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）；\n\t\t7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位；\n\t\t8、自动的日志回滚；\n\t\t9、可以支持并实现对主机的冗余监控；\n\t\t10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等。\n\t\t\n\n**2. 安装Nagios基础支持套件和添加用户**\n--------------------------\n\n1).安装套件\n```\n yum install gcc glibc glibc-common gd gd-devel xinetd openssl-devel\n```\n2).创建nagios用户和用户组(先进行该步骤，不然编译nagios时会报错)\n```\nuseradd -s /sbin/nologin nagios   #创建nagios用户，设置该用户无法登录\nmkdir /usr/local/nagios   \nchown -R nagios.nagios /usr/local/nagios   #设置目录权限\n```\n3).安装httpd和php\n```\nyum install httpd*    ##安装Web服务器Apache相关服务,nagios提供了web监控界面，通过web界面可以看到被监控主机运行状态\nyum install php*      ##安装PHP相关服务\n```\n\n\n**3. 下载并编译安装Nagios**\n--------------------\n\n1).下载并解压nagios\n可以前往 https://www.nagios.org 获取最新的软件包，这里以 Nagios 核心 3.4.3 为例：\n```\nwget https://assets.nagios.com/downloads/nagioscore/releases/nagios-3.4.3.tar.gz \ntar -zxvf nagios-3.4.3.tar.gz \ncd nagios   #编译安装nagios\n```\n2).编译安装nagios\n```\n./configure --prefix=/usr/local/nagios\nmake all   ##中间如有选择，直接A\nmake install    ##安装主程序，CGI和HTML文件\nmake install-init   ##在/etc/rc.d/init.d安装启动脚本\nmake install-config    ##安装示例配置文件\nmake install-commandmode    ##配置目录权限\n```\n3).配置自启动\n```\nchkconfig --add nagios   ##增加nagios为系统服务\nchkconfig --level 35 nagios on  ##设置nagios在运行级别3、5的情况下为开启状态\nchkconfig --list nagios   ##列出nagios服务设置详情\n```\n4).验证程序是否配置正确\n```\n/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n```\n![这里写图片描述](http://img.blog.csdn.net/20180123112026072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n\n**4. 安装Nagios插件**\n-----------------\n\n1).下载nagios-plugins\n可以前往 https://www.nagios.org 获取最新的软件包，这里以 插件 2.0.3 为例：\n```\nwget http://nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz  ##下载nagios-plugins\ntar -zxvf nagios-plugins-2.0.3.tar.gz   ##解压nagios-plugins\ncd nagios-plugins-2.0.3\n```\n2).编译安装nagios-plugins\n\n```\n./configure --prefix=/usr/local/nagios\nmake\nmake install\n```\n3).下载nagios-snmp-plugins\n\n```\nwget http://nagios.manubulon.com/nagios-snmp-plugins.1.1.1.tgz \ntar -zxvf nagios-snmp-plugins.1.1.1.tgz \ncd nagios-plugins-2.0.3/\n```\n4).编译安装nagios-snmp-plugins\n\n```\nyum install perl-CPAN   ##yum安装Perl-CPAN，CPAN是Perl软件收藏库，收集了大量有用的Perl模块(modules)及其相关的文件。nagios-snmp-plugins是一套用Perl编写的通过SNMP方式监控主机的插件程序，因此需要先安装perl-CPAN\nperl -MCPAN -e shell\ncpan[1]> install Net::SNMP\n```\n\n**5. 配置httpd**\n--------------\n\n 1).\t\n\n```\nvi /etc/httpd/conf/httpd.conf\n将\nUser apache \nGroup apache\n```\n\t修改为如下内容：\n![这里写图片描述](http://img.blog.csdn.net/20180123104741286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n2).在如下位置添加index.php\n![fanming.shop](http://img.blog.csdn.net/20180123104930999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3).配置nagios.conf\n```\ncd nagios/       #nagios 解压后的目录\nmake install-webconf    ##安装nagios的web接口,会在/etc/httpd/conf.d目录中创建nagios.conf文件\nvim /etc/httpd/conf.d/nagios.conf\n```\n\t将22行和39行附近的htpasswd.user改为htpasswd（注:也可不进行更改，但在下部中要加全路径名）\n![fanming.shop](http://img.blog.csdn.net/20180123105742740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n4).创建nagios验证文件\n```\nhtpasswd -c /usr/local/nagios/etc/htpasswd admin  ##创建nagios登录web界面的用户名和密码\ncat /usr/local/nagios/etc/htpasswd    ##查看认证文件的内容\n```\n5).关闭SELinux和防火墙：\n```\na、临时关闭（不用重启机器）：\nsetenforce 0    ##设置SELinux 成为permissive模式  （关闭SELinux）\nsetenforce 1    ##设置SELinux 成为enforcing模式    (开启SELinux）\nb、修改配置文件需要重启机器：\nvi /etc/selinux/config\n将SELINUX=enforcing 改为SELINUX=disabled\n需重启机器\nc、可自己做策略开放相应端口，这里我直接关闭:\nsystemctl status firewalld.service       ##查看防火墙状态\nsystemctl stop firewalld.service         ##关闭防火墙\n```\n6).启用服务并进入nagios\n```\nsystemctl start httpd.service\nsystemctl start snmpd.service\nsystemctl start nagios.service\n```\n\n**至此，就可以访问http://localhost/nagios 访问web界面了** \n","source":"_posts/centos7InstallNagios.md","raw":"---\ndate: 2017-06-05 22:34:45\ntitle: nagios监控（一）之centos7安装nagios监控服务\ntags: [linux,nagios]\ncategories: linux\n\n---\n\n**1. nagios简介**\n---------------\n\n \n\t\tNagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。\n\t\t    \n\t\tNagios 可以监控的功能有：\n\t\t1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； \n\t\t2、监控主机资源（处理器负荷、磁盘利用率等）；\n\t\t3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法；\n\t\t4、并行服务检查机制；\n\t\t5、具备定义网络分层结构的能力，用\"parent\"主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态；\n\t\t6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）；\n\t\t7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位；\n\t\t8、自动的日志回滚；\n\t\t9、可以支持并实现对主机的冗余监控；\n\t\t10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等。\n\t\t\n\n**2. 安装Nagios基础支持套件和添加用户**\n--------------------------\n\n1).安装套件\n```\n yum install gcc glibc glibc-common gd gd-devel xinetd openssl-devel\n```\n2).创建nagios用户和用户组(先进行该步骤，不然编译nagios时会报错)\n```\nuseradd -s /sbin/nologin nagios   #创建nagios用户，设置该用户无法登录\nmkdir /usr/local/nagios   \nchown -R nagios.nagios /usr/local/nagios   #设置目录权限\n```\n3).安装httpd和php\n```\nyum install httpd*    ##安装Web服务器Apache相关服务,nagios提供了web监控界面，通过web界面可以看到被监控主机运行状态\nyum install php*      ##安装PHP相关服务\n```\n\n\n**3. 下载并编译安装Nagios**\n--------------------\n\n1).下载并解压nagios\n可以前往 https://www.nagios.org 获取最新的软件包，这里以 Nagios 核心 3.4.3 为例：\n```\nwget https://assets.nagios.com/downloads/nagioscore/releases/nagios-3.4.3.tar.gz \ntar -zxvf nagios-3.4.3.tar.gz \ncd nagios   #编译安装nagios\n```\n2).编译安装nagios\n```\n./configure --prefix=/usr/local/nagios\nmake all   ##中间如有选择，直接A\nmake install    ##安装主程序，CGI和HTML文件\nmake install-init   ##在/etc/rc.d/init.d安装启动脚本\nmake install-config    ##安装示例配置文件\nmake install-commandmode    ##配置目录权限\n```\n3).配置自启动\n```\nchkconfig --add nagios   ##增加nagios为系统服务\nchkconfig --level 35 nagios on  ##设置nagios在运行级别3、5的情况下为开启状态\nchkconfig --list nagios   ##列出nagios服务设置详情\n```\n4).验证程序是否配置正确\n```\n/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg\n```\n![这里写图片描述](http://img.blog.csdn.net/20180123112026072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n\n**4. 安装Nagios插件**\n-----------------\n\n1).下载nagios-plugins\n可以前往 https://www.nagios.org 获取最新的软件包，这里以 插件 2.0.3 为例：\n```\nwget http://nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz  ##下载nagios-plugins\ntar -zxvf nagios-plugins-2.0.3.tar.gz   ##解压nagios-plugins\ncd nagios-plugins-2.0.3\n```\n2).编译安装nagios-plugins\n\n```\n./configure --prefix=/usr/local/nagios\nmake\nmake install\n```\n3).下载nagios-snmp-plugins\n\n```\nwget http://nagios.manubulon.com/nagios-snmp-plugins.1.1.1.tgz \ntar -zxvf nagios-snmp-plugins.1.1.1.tgz \ncd nagios-plugins-2.0.3/\n```\n4).编译安装nagios-snmp-plugins\n\n```\nyum install perl-CPAN   ##yum安装Perl-CPAN，CPAN是Perl软件收藏库，收集了大量有用的Perl模块(modules)及其相关的文件。nagios-snmp-plugins是一套用Perl编写的通过SNMP方式监控主机的插件程序，因此需要先安装perl-CPAN\nperl -MCPAN -e shell\ncpan[1]> install Net::SNMP\n```\n\n**5. 配置httpd**\n--------------\n\n 1).\t\n\n```\nvi /etc/httpd/conf/httpd.conf\n将\nUser apache \nGroup apache\n```\n\t修改为如下内容：\n![这里写图片描述](http://img.blog.csdn.net/20180123104741286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n2).在如下位置添加index.php\n![fanming.shop](http://img.blog.csdn.net/20180123104930999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3).配置nagios.conf\n```\ncd nagios/       #nagios 解压后的目录\nmake install-webconf    ##安装nagios的web接口,会在/etc/httpd/conf.d目录中创建nagios.conf文件\nvim /etc/httpd/conf.d/nagios.conf\n```\n\t将22行和39行附近的htpasswd.user改为htpasswd（注:也可不进行更改，但在下部中要加全路径名）\n![fanming.shop](http://img.blog.csdn.net/20180123105742740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n4).创建nagios验证文件\n```\nhtpasswd -c /usr/local/nagios/etc/htpasswd admin  ##创建nagios登录web界面的用户名和密码\ncat /usr/local/nagios/etc/htpasswd    ##查看认证文件的内容\n```\n5).关闭SELinux和防火墙：\n```\na、临时关闭（不用重启机器）：\nsetenforce 0    ##设置SELinux 成为permissive模式  （关闭SELinux）\nsetenforce 1    ##设置SELinux 成为enforcing模式    (开启SELinux）\nb、修改配置文件需要重启机器：\nvi /etc/selinux/config\n将SELINUX=enforcing 改为SELINUX=disabled\n需重启机器\nc、可自己做策略开放相应端口，这里我直接关闭:\nsystemctl status firewalld.service       ##查看防火墙状态\nsystemctl stop firewalld.service         ##关闭防火墙\n```\n6).启用服务并进入nagios\n```\nsystemctl start httpd.service\nsystemctl start snmpd.service\nsystemctl start nagios.service\n```\n\n**至此，就可以访问http://localhost/nagios 访问web界面了** \n","slug":"centos7InstallNagios","published":1,"updated":"2018-01-25T03:28:36.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4fm00018e9ok9fb8nak","content":"<h2 id=\"1-nagios简介\"><a href=\"#1-nagios简介\" class=\"headerlink\" title=\"1. nagios简介\"></a><strong>1. nagios简介</strong></h2><pre><code>Nagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。\n\nNagios 可以监控的功能有：\n1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； \n2、监控主机资源（处理器负荷、磁盘利用率等）；\n3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法；\n4、并行服务检查机制；\n5、具备定义网络分层结构的能力，用&quot;parent&quot;主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态；\n6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）；\n7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位；\n8、自动的日志回滚；\n9、可以支持并实现对主机的冗余监控；\n10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等。\n</code></pre><h2 id=\"2-安装Nagios基础支持套件和添加用户\"><a href=\"#2-安装Nagios基础支持套件和添加用户\" class=\"headerlink\" title=\"2. 安装Nagios基础支持套件和添加用户\"></a><strong>2. 安装Nagios基础支持套件和添加用户</strong></h2><p>1).安装套件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc glibc glibc-common gd gd-devel xinetd openssl-devel</span><br></pre></td></tr></table></figure></p>\n<p>2).创建nagios用户和用户组(先进行该步骤，不然编译nagios时会报错)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -s /sbin/nologin nagios   #创建nagios用户，设置该用户无法登录</span><br><span class=\"line\">mkdir /usr/local/nagios   </span><br><span class=\"line\">chown -R nagios.nagios /usr/local/nagios   #设置目录权限</span><br></pre></td></tr></table></figure></p>\n<p>3).安装httpd和php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd*    ##安装Web服务器Apache相关服务,nagios提供了web监控界面，通过web界面可以看到被监控主机运行状态</span><br><span class=\"line\">yum install php*      ##安装PHP相关服务</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-下载并编译安装Nagios\"><a href=\"#3-下载并编译安装Nagios\" class=\"headerlink\" title=\"3. 下载并编译安装Nagios\"></a><strong>3. 下载并编译安装Nagios</strong></h2><p>1).下载并解压nagios<br>可以前往 <a href=\"https://www.nagios.org\" target=\"_blank\" rel=\"noopener\">https://www.nagios.org</a> 获取最新的软件包，这里以 Nagios 核心 3.4.3 为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-3.4.3.tar.gz </span><br><span class=\"line\">tar -zxvf nagios-3.4.3.tar.gz </span><br><span class=\"line\">cd nagios   #编译安装nagios</span><br></pre></td></tr></table></figure></p>\n<p>2).编译安装nagios<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nagios</span><br><span class=\"line\">make all   ##中间如有选择，直接A</span><br><span class=\"line\">make install    ##安装主程序，CGI和HTML文件</span><br><span class=\"line\">make install-init   ##在/etc/rc.d/init.d安装启动脚本</span><br><span class=\"line\">make install-config    ##安装示例配置文件</span><br><span class=\"line\">make install-commandmode    ##配置目录权限</span><br></pre></td></tr></table></figure></p>\n<p>3).配置自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add nagios   ##增加nagios为系统服务</span><br><span class=\"line\">chkconfig --level 35 nagios on  ##设置nagios在运行级别3、5的情况下为开启状态</span><br><span class=\"line\">chkconfig --list nagios   ##列出nagios服务设置详情</span><br></pre></td></tr></table></figure></p>\n<p>4).验证程序是否配置正确<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180123112026072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"4-安装Nagios插件\"><a href=\"#4-安装Nagios插件\" class=\"headerlink\" title=\"4. 安装Nagios插件\"></a><strong>4. 安装Nagios插件</strong></h2><p>1).下载nagios-plugins<br>可以前往 <a href=\"https://www.nagios.org\" target=\"_blank\" rel=\"noopener\">https://www.nagios.org</a> 获取最新的软件包，这里以 插件 2.0.3 为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz  ##下载nagios-plugins</span><br><span class=\"line\">tar -zxvf nagios-plugins-2.0.3.tar.gz   ##解压nagios-plugins</span><br><span class=\"line\">cd nagios-plugins-2.0.3</span><br></pre></td></tr></table></figure></p>\n<p>2).编译安装nagios-plugins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nagios</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>3).下载nagios-snmp-plugins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nagios.manubulon.com/nagios-snmp-plugins.1.1.1.tgz </span><br><span class=\"line\">tar -zxvf nagios-snmp-plugins.1.1.1.tgz </span><br><span class=\"line\">cd nagios-plugins-2.0.3/</span><br></pre></td></tr></table></figure>\n<p>4).编译安装nagios-snmp-plugins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install perl-CPAN   ##yum安装Perl-CPAN，CPAN是Perl软件收藏库，收集了大量有用的Perl模块(modules)及其相关的文件。nagios-snmp-plugins是一套用Perl编写的通过SNMP方式监控主机的插件程序，因此需要先安装perl-CPAN</span><br><span class=\"line\">perl -MCPAN -e shell</span><br><span class=\"line\">cpan[1]&gt; install Net::SNMP</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置httpd\"><a href=\"#5-配置httpd\" class=\"headerlink\" title=\"5. 配置httpd\"></a><strong>5. 配置httpd</strong></h2><p> 1).    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/httpd/conf/httpd.conf</span><br><span class=\"line\">将</span><br><span class=\"line\">User apache </span><br><span class=\"line\">Group apache</span><br></pre></td></tr></table></figure>\n<pre><code>修改为如下内容：\n</code></pre><p><img src=\"http://img.blog.csdn.net/20180123104741286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>2).在如下位置添加index.php<br><img src=\"http://img.blog.csdn.net/20180123104930999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"fanming.shop\"></p>\n<p>3).配置nagios.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nagios/       #nagios 解压后的目录</span><br><span class=\"line\">make install-webconf    ##安装nagios的web接口,会在/etc/httpd/conf.d目录中创建nagios.conf文件</span><br><span class=\"line\">vim /etc/httpd/conf.d/nagios.conf</span><br></pre></td></tr></table></figure></p>\n<pre><code>将22行和39行附近的htpasswd.user改为htpasswd（注:也可不进行更改，但在下部中要加全路径名）\n</code></pre><p><img src=\"http://img.blog.csdn.net/20180123105742740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"fanming.shop\"></p>\n<p>4).创建nagios验证文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htpasswd -c /usr/local/nagios/etc/htpasswd admin  ##创建nagios登录web界面的用户名和密码</span><br><span class=\"line\">cat /usr/local/nagios/etc/htpasswd    ##查看认证文件的内容</span><br></pre></td></tr></table></figure></p>\n<p>5).关闭SELinux和防火墙：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a、临时关闭（不用重启机器）：</span><br><span class=\"line\">setenforce 0    ##设置SELinux 成为permissive模式  （关闭SELinux）</span><br><span class=\"line\">setenforce 1    ##设置SELinux 成为enforcing模式    (开启SELinux）</span><br><span class=\"line\">b、修改配置文件需要重启机器：</span><br><span class=\"line\">vi /etc/selinux/config</span><br><span class=\"line\">将SELINUX=enforcing 改为SELINUX=disabled</span><br><span class=\"line\">需重启机器</span><br><span class=\"line\">c、可自己做策略开放相应端口，这里我直接关闭:</span><br><span class=\"line\">systemctl status firewalld.service       ##查看防火墙状态</span><br><span class=\"line\">systemctl stop firewalld.service         ##关闭防火墙</span><br></pre></td></tr></table></figure></p>\n<p>6).启用服务并进入nagios<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start httpd.service</span><br><span class=\"line\">systemctl start snmpd.service</span><br><span class=\"line\">systemctl start nagios.service</span><br></pre></td></tr></table></figure></p>\n<p><strong>至此，就可以访问<a href=\"http://localhost/nagios\" target=\"_blank\" rel=\"noopener\">http://localhost/nagios</a> 访问web界面了</strong> </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-nagios简介\"><a href=\"#1-nagios简介\" class=\"headerlink\" title=\"1. nagios简介\"></a><strong>1. nagios简介</strong></h2><pre><code>Nagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。\n\nNagios 可以监控的功能有：\n1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； \n2、监控主机资源（处理器负荷、磁盘利用率等）；\n3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法；\n4、并行服务检查机制；\n5、具备定义网络分层结构的能力，用&quot;parent&quot;主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态；\n6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）；\n7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位；\n8、自动的日志回滚；\n9、可以支持并实现对主机的冗余监控；\n10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等。\n</code></pre><h2 id=\"2-安装Nagios基础支持套件和添加用户\"><a href=\"#2-安装Nagios基础支持套件和添加用户\" class=\"headerlink\" title=\"2. 安装Nagios基础支持套件和添加用户\"></a><strong>2. 安装Nagios基础支持套件和添加用户</strong></h2><p>1).安装套件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install gcc glibc glibc-common gd gd-devel xinetd openssl-devel</span><br></pre></td></tr></table></figure></p>\n<p>2).创建nagios用户和用户组(先进行该步骤，不然编译nagios时会报错)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -s /sbin/nologin nagios   #创建nagios用户，设置该用户无法登录</span><br><span class=\"line\">mkdir /usr/local/nagios   </span><br><span class=\"line\">chown -R nagios.nagios /usr/local/nagios   #设置目录权限</span><br></pre></td></tr></table></figure></p>\n<p>3).安装httpd和php<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install httpd*    ##安装Web服务器Apache相关服务,nagios提供了web监控界面，通过web界面可以看到被监控主机运行状态</span><br><span class=\"line\">yum install php*      ##安装PHP相关服务</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"3-下载并编译安装Nagios\"><a href=\"#3-下载并编译安装Nagios\" class=\"headerlink\" title=\"3. 下载并编译安装Nagios\"></a><strong>3. 下载并编译安装Nagios</strong></h2><p>1).下载并解压nagios<br>可以前往 <a href=\"https://www.nagios.org\" target=\"_blank\" rel=\"noopener\">https://www.nagios.org</a> 获取最新的软件包，这里以 Nagios 核心 3.4.3 为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-3.4.3.tar.gz </span><br><span class=\"line\">tar -zxvf nagios-3.4.3.tar.gz </span><br><span class=\"line\">cd nagios   #编译安装nagios</span><br></pre></td></tr></table></figure></p>\n<p>2).编译安装nagios<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nagios</span><br><span class=\"line\">make all   ##中间如有选择，直接A</span><br><span class=\"line\">make install    ##安装主程序，CGI和HTML文件</span><br><span class=\"line\">make install-init   ##在/etc/rc.d/init.d安装启动脚本</span><br><span class=\"line\">make install-config    ##安装示例配置文件</span><br><span class=\"line\">make install-commandmode    ##配置目录权限</span><br></pre></td></tr></table></figure></p>\n<p>3).配置自启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chkconfig --add nagios   ##增加nagios为系统服务</span><br><span class=\"line\">chkconfig --level 35 nagios on  ##设置nagios在运行级别3、5的情况下为开启状态</span><br><span class=\"line\">chkconfig --list nagios   ##列出nagios服务设置详情</span><br></pre></td></tr></table></figure></p>\n<p>4).验证程序是否配置正确<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180123112026072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"4-安装Nagios插件\"><a href=\"#4-安装Nagios插件\" class=\"headerlink\" title=\"4. 安装Nagios插件\"></a><strong>4. 安装Nagios插件</strong></h2><p>1).下载nagios-plugins<br>可以前往 <a href=\"https://www.nagios.org\" target=\"_blank\" rel=\"noopener\">https://www.nagios.org</a> 获取最新的软件包，这里以 插件 2.0.3 为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nagios-plugins.org/download/nagios-plugins-2.0.3.tar.gz  ##下载nagios-plugins</span><br><span class=\"line\">tar -zxvf nagios-plugins-2.0.3.tar.gz   ##解压nagios-plugins</span><br><span class=\"line\">cd nagios-plugins-2.0.3</span><br></pre></td></tr></table></figure></p>\n<p>2).编译安装nagios-plugins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nagios</span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>3).下载nagios-snmp-plugins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nagios.manubulon.com/nagios-snmp-plugins.1.1.1.tgz </span><br><span class=\"line\">tar -zxvf nagios-snmp-plugins.1.1.1.tgz </span><br><span class=\"line\">cd nagios-plugins-2.0.3/</span><br></pre></td></tr></table></figure>\n<p>4).编译安装nagios-snmp-plugins</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install perl-CPAN   ##yum安装Perl-CPAN，CPAN是Perl软件收藏库，收集了大量有用的Perl模块(modules)及其相关的文件。nagios-snmp-plugins是一套用Perl编写的通过SNMP方式监控主机的插件程序，因此需要先安装perl-CPAN</span><br><span class=\"line\">perl -MCPAN -e shell</span><br><span class=\"line\">cpan[1]&gt; install Net::SNMP</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置httpd\"><a href=\"#5-配置httpd\" class=\"headerlink\" title=\"5. 配置httpd\"></a><strong>5. 配置httpd</strong></h2><p> 1).    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/httpd/conf/httpd.conf</span><br><span class=\"line\">将</span><br><span class=\"line\">User apache </span><br><span class=\"line\">Group apache</span><br></pre></td></tr></table></figure>\n<pre><code>修改为如下内容：\n</code></pre><p><img src=\"http://img.blog.csdn.net/20180123104741286?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>2).在如下位置添加index.php<br><img src=\"http://img.blog.csdn.net/20180123104930999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"fanming.shop\"></p>\n<p>3).配置nagios.conf<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nagios/       #nagios 解压后的目录</span><br><span class=\"line\">make install-webconf    ##安装nagios的web接口,会在/etc/httpd/conf.d目录中创建nagios.conf文件</span><br><span class=\"line\">vim /etc/httpd/conf.d/nagios.conf</span><br></pre></td></tr></table></figure></p>\n<pre><code>将22行和39行附近的htpasswd.user改为htpasswd（注:也可不进行更改，但在下部中要加全路径名）\n</code></pre><p><img src=\"http://img.blog.csdn.net/20180123105742740?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"fanming.shop\"></p>\n<p>4).创建nagios验证文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">htpasswd -c /usr/local/nagios/etc/htpasswd admin  ##创建nagios登录web界面的用户名和密码</span><br><span class=\"line\">cat /usr/local/nagios/etc/htpasswd    ##查看认证文件的内容</span><br></pre></td></tr></table></figure></p>\n<p>5).关闭SELinux和防火墙：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a、临时关闭（不用重启机器）：</span><br><span class=\"line\">setenforce 0    ##设置SELinux 成为permissive模式  （关闭SELinux）</span><br><span class=\"line\">setenforce 1    ##设置SELinux 成为enforcing模式    (开启SELinux）</span><br><span class=\"line\">b、修改配置文件需要重启机器：</span><br><span class=\"line\">vi /etc/selinux/config</span><br><span class=\"line\">将SELINUX=enforcing 改为SELINUX=disabled</span><br><span class=\"line\">需重启机器</span><br><span class=\"line\">c、可自己做策略开放相应端口，这里我直接关闭:</span><br><span class=\"line\">systemctl status firewalld.service       ##查看防火墙状态</span><br><span class=\"line\">systemctl stop firewalld.service         ##关闭防火墙</span><br></pre></td></tr></table></figure></p>\n<p>6).启用服务并进入nagios<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start httpd.service</span><br><span class=\"line\">systemctl start snmpd.service</span><br><span class=\"line\">systemctl start nagios.service</span><br></pre></td></tr></table></figure></p>\n<p><strong>至此，就可以访问<a href=\"http://localhost/nagios\" target=\"_blank\" rel=\"noopener\">http://localhost/nagios</a> 访问web界面了</strong> </p>\n"},{"date":"2017-11-19T14:13:00.000Z","title":"hexo搭建博客遇到的坑","_content":"\n\n电脑重装系统后，克隆部署hexo博客的源码时，发现主题文件夹是一个空的文件夹，开始以为时下拉的时候出问题了。折腾了好一会儿才发现git仓库里面的同名文件夹打不开，变成了一个类似于文件的图标；\n幸好有备份项目，打开项目，进到theme文件夹，看到里面文件一个不少，于是又重新上传。结果还是如此，上传到github就打不开文件夹\n\n原因可能是这样的：\n我的主题文件是直接从git上面拉下来的，里面包含别人仓库的配置\n查看远程分支：\n![这里写图片描述](http://img.blog.csdn.net/20180124112731559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n最后，重新创建了文件夹，并将之前配置好的文件复制过来，在次上传就OK了\n","source":"_posts/hexo_question.md","raw":"---\ndate: 2017-11-19 22:13:00\n\ntitle: hexo搭建博客遇到的坑\ntags: [hexo,linux]\ncategories: hexo\n---\n\n\n电脑重装系统后，克隆部署hexo博客的源码时，发现主题文件夹是一个空的文件夹，开始以为时下拉的时候出问题了。折腾了好一会儿才发现git仓库里面的同名文件夹打不开，变成了一个类似于文件的图标；\n幸好有备份项目，打开项目，进到theme文件夹，看到里面文件一个不少，于是又重新上传。结果还是如此，上传到github就打不开文件夹\n\n原因可能是这样的：\n我的主题文件是直接从git上面拉下来的，里面包含别人仓库的配置\n查看远程分支：\n![这里写图片描述](http://img.blog.csdn.net/20180124112731559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n最后，重新创建了文件夹，并将之前配置好的文件复制过来，在次上传就OK了\n","slug":"hexo_question","published":1,"updated":"2018-01-24T03:44:00.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4gm00038e9o7ics29ql","content":"<p>电脑重装系统后，克隆部署hexo博客的源码时，发现主题文件夹是一个空的文件夹，开始以为时下拉的时候出问题了。折腾了好一会儿才发现git仓库里面的同名文件夹打不开，变成了一个类似于文件的图标；<br>幸好有备份项目，打开项目，进到theme文件夹，看到里面文件一个不少，于是又重新上传。结果还是如此，上传到github就打不开文件夹</p>\n<p>原因可能是这样的：<br>我的主题文件是直接从git上面拉下来的，里面包含别人仓库的配置<br>查看远程分支：<br><img src=\"http://img.blog.csdn.net/20180124112731559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>最后，重新创建了文件夹，并将之前配置好的文件复制过来，在次上传就OK了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>电脑重装系统后，克隆部署hexo博客的源码时，发现主题文件夹是一个空的文件夹，开始以为时下拉的时候出问题了。折腾了好一会儿才发现git仓库里面的同名文件夹打不开，变成了一个类似于文件的图标；<br>幸好有备份项目，打开项目，进到theme文件夹，看到里面文件一个不少，于是又重新上传。结果还是如此，上传到github就打不开文件夹</p>\n<p>原因可能是这样的：<br>我的主题文件是直接从git上面拉下来的，里面包含别人仓库的配置<br>查看远程分支：<br><img src=\"http://img.blog.csdn.net/20180124112731559?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>最后，重新创建了文件夹，并将之前配置好的文件复制过来，在次上传就OK了</p>\n"},{"date":"2017-04-02T11:04:11.000Z","title":"linux中使用touch修改文件的时间","_content":"\n\nliunx中使用touch命令更改文件的时间\n------------------------\n\n 1. 首先介绍下Linux系统中文件的三个时间\n\n\t\t1）modification time (mtime,修改时间)：这个时间指的是文件内容修改的时间，而不是文件属性的修改，当数据内容修改时，这个时间就会改变，用命令ls -l默认显示的就是这个时间。\n\t\t    \n\t\t2）status time （ctime,状态时间）：当一个文件的状态改变时，这个时间就会改变，例如更改了文件的权限与属性等，它就会改变。\n\t\t\n\t\t3）access time （atime,访问时间）：当读取文件内容时，就会更改这个时间，例如使用cat 去读取/etc/man.config,那么该文件的atime就会改变。\n\n 2. touch的用法为：\n\n\t     touch [-actmd] 文件\n\t\n\t     参数：\n\t\n\t     -a:仅修改access time\n\t\n\t     -c:仅修改时间而不建立文件\n\t\n\t     -t:后面可以接时间，格式为：[[CC]YY]MMDDhhmm [.SS]\n\t\t\t\t     *该参数修改的是访问时间和修改时间*\n\n\t\t\t\tCC - 年份的前两位 \n\t\t\t\tYY - 年份的后两位 \n\t\t\t\tMM - 月份 [01-12]\n\t\t\t\tDD - 日期 [01-31]\n\t\t\t\thh - 时 [00-23]\n\t\t\t\tmm - 分 [00-59]\n\t\t\t\tSS - 秒 [00-61]\n\n\t\n\t     -m:仅修改mtime\n\t\n\t     -d:后面可以接日期，也可以使用--date=\"日期或时间\"\n\n\t\t\n\n","source":"_posts/linux_touch_time.md","raw":"---\ndate: 2017-04-02 19:04:11\ntitle: linux中使用touch修改文件的时间\ntags: linux\ncategories: linux\n\n---\n\n\nliunx中使用touch命令更改文件的时间\n------------------------\n\n 1. 首先介绍下Linux系统中文件的三个时间\n\n\t\t1）modification time (mtime,修改时间)：这个时间指的是文件内容修改的时间，而不是文件属性的修改，当数据内容修改时，这个时间就会改变，用命令ls -l默认显示的就是这个时间。\n\t\t    \n\t\t2）status time （ctime,状态时间）：当一个文件的状态改变时，这个时间就会改变，例如更改了文件的权限与属性等，它就会改变。\n\t\t\n\t\t3）access time （atime,访问时间）：当读取文件内容时，就会更改这个时间，例如使用cat 去读取/etc/man.config,那么该文件的atime就会改变。\n\n 2. touch的用法为：\n\n\t     touch [-actmd] 文件\n\t\n\t     参数：\n\t\n\t     -a:仅修改access time\n\t\n\t     -c:仅修改时间而不建立文件\n\t\n\t     -t:后面可以接时间，格式为：[[CC]YY]MMDDhhmm [.SS]\n\t\t\t\t     *该参数修改的是访问时间和修改时间*\n\n\t\t\t\tCC - 年份的前两位 \n\t\t\t\tYY - 年份的后两位 \n\t\t\t\tMM - 月份 [01-12]\n\t\t\t\tDD - 日期 [01-31]\n\t\t\t\thh - 时 [00-23]\n\t\t\t\tmm - 分 [00-59]\n\t\t\t\tSS - 秒 [00-61]\n\n\t\n\t     -m:仅修改mtime\n\t\n\t     -d:后面可以接日期，也可以使用--date=\"日期或时间\"\n\n\t\t\n\n","slug":"linux_touch_time","published":1,"updated":"2018-01-17T03:04:39.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4hn00078e9oz2na0dl5","content":"<h2 id=\"liunx中使用touch命令更改文件的时间\"><a href=\"#liunx中使用touch命令更改文件的时间\" class=\"headerlink\" title=\"liunx中使用touch命令更改文件的时间\"></a>liunx中使用touch命令更改文件的时间</h2><ol>\n<li><p>首先介绍下Linux系统中文件的三个时间</p>\n<pre><code>1）modification time (mtime,修改时间)：这个时间指的是文件内容修改的时间，而不是文件属性的修改，当数据内容修改时，这个时间就会改变，用命令ls -l默认显示的就是这个时间。\n\n2）status time （ctime,状态时间）：当一个文件的状态改变时，这个时间就会改变，例如更改了文件的权限与属性等，它就会改变。\n\n3）access time （atime,访问时间）：当读取文件内容时，就会更改这个时间，例如使用cat 去读取/etc/man.config,那么该文件的atime就会改变。\n</code></pre></li>\n<li><p>touch的用法为：</p>\n<pre><code>touch [-actmd] 文件\n\n参数：\n\n-a:仅修改access time\n\n-c:仅修改时间而不建立文件\n\n-t:后面可以接时间，格式为：[[CC]YY]MMDDhhmm [.SS]\n            *该参数修改的是访问时间和修改时间*\n\n       CC - 年份的前两位 \n       YY - 年份的后两位 \n       MM - 月份 [01-12]\n       DD - 日期 [01-31]\n       hh - 时 [00-23]\n       mm - 分 [00-59]\n       SS - 秒 [00-61]\n</code></pre></li>\n</ol>\n<pre><code>-m:仅修改mtime\n\n-d:后面可以接日期，也可以使用--date=&quot;日期或时间&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"liunx中使用touch命令更改文件的时间\"><a href=\"#liunx中使用touch命令更改文件的时间\" class=\"headerlink\" title=\"liunx中使用touch命令更改文件的时间\"></a>liunx中使用touch命令更改文件的时间</h2><ol>\n<li><p>首先介绍下Linux系统中文件的三个时间</p>\n<pre><code>1）modification time (mtime,修改时间)：这个时间指的是文件内容修改的时间，而不是文件属性的修改，当数据内容修改时，这个时间就会改变，用命令ls -l默认显示的就是这个时间。\n\n2）status time （ctime,状态时间）：当一个文件的状态改变时，这个时间就会改变，例如更改了文件的权限与属性等，它就会改变。\n\n3）access time （atime,访问时间）：当读取文件内容时，就会更改这个时间，例如使用cat 去读取/etc/man.config,那么该文件的atime就会改变。\n</code></pre></li>\n<li><p>touch的用法为：</p>\n<pre><code>touch [-actmd] 文件\n\n参数：\n\n-a:仅修改access time\n\n-c:仅修改时间而不建立文件\n\n-t:后面可以接时间，格式为：[[CC]YY]MMDDhhmm [.SS]\n            *该参数修改的是访问时间和修改时间*\n\n       CC - 年份的前两位 \n       YY - 年份的后两位 \n       MM - 月份 [01-12]\n       DD - 日期 [01-31]\n       hh - 时 [00-23]\n       mm - 分 [00-59]\n       SS - 秒 [00-61]\n</code></pre></li>\n</ol>\n<pre><code>-m:仅修改mtime\n\n-d:后面可以接日期，也可以使用--date=&quot;日期或时间&quot;\n</code></pre>"},{"date":"2017-11-19T14:13:00.000Z","title":"python使用爬虫获取json格式的网页，输出以及写入文件乱码","_content":"\n解决python使用爬虫获取json格式的网页，输出以及写入文件乱码的情况\n\n```\nimport codecs\n\nresp = requests.get(url,headers=headers)\nresult = json.dumps(resp.json(),ensure_ascii=False)\n#若不指定ensure_ascii=False，输出的是中文的ascii 字符码，而不是真正的中文。\n#这是因为json.dumps 序列化时对中文默认使用的ascii编码.想输出真正的中文需要指定ensure_ascii=False：\n\nfile1 = codecs.open(date+\"liujiqian.txt\",'a','utf-8')\t\n#将获取到的内容写到文件，以指定的编码方式打开文件，这样才能正常写入中文\nfile1.write(result)\nfile1.close()\n\n```\n","source":"_posts/pachong_luanma.md","raw":"---\ndate: 2017-11-19 22:13:00\n\ntitle: python使用爬虫获取json格式的网页，输出以及写入文件乱码\ntags: scarpy\ncategories: python\n---\n\n解决python使用爬虫获取json格式的网页，输出以及写入文件乱码的情况\n\n```\nimport codecs\n\nresp = requests.get(url,headers=headers)\nresult = json.dumps(resp.json(),ensure_ascii=False)\n#若不指定ensure_ascii=False，输出的是中文的ascii 字符码，而不是真正的中文。\n#这是因为json.dumps 序列化时对中文默认使用的ascii编码.想输出真正的中文需要指定ensure_ascii=False：\n\nfile1 = codecs.open(date+\"liujiqian.txt\",'a','utf-8')\t\n#将获取到的内容写到文件，以指定的编码方式打开文件，这样才能正常写入中文\nfile1.write(result)\nfile1.close()\n\n```\n","slug":"pachong_luanma","published":1,"updated":"2018-01-17T02:27:48.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4i000098e9ofxinvdsz","content":"<p>解决python使用爬虫获取json格式的网页，输出以及写入文件乱码的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import codecs</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(url,headers=headers)</span><br><span class=\"line\">result = json.dumps(resp.json(),ensure_ascii=False)</span><br><span class=\"line\">#若不指定ensure_ascii=False，输出的是中文的ascii 字符码，而不是真正的中文。</span><br><span class=\"line\">#这是因为json.dumps 序列化时对中文默认使用的ascii编码.想输出真正的中文需要指定ensure_ascii=False：</span><br><span class=\"line\"></span><br><span class=\"line\">file1 = codecs.open(date+&quot;liujiqian.txt&quot;,&apos;a&apos;,&apos;utf-8&apos;)\t</span><br><span class=\"line\">#将获取到的内容写到文件，以指定的编码方式打开文件，这样才能正常写入中文</span><br><span class=\"line\">file1.write(result)</span><br><span class=\"line\">file1.close()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>解决python使用爬虫获取json格式的网页，输出以及写入文件乱码的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import codecs</span><br><span class=\"line\"></span><br><span class=\"line\">resp = requests.get(url,headers=headers)</span><br><span class=\"line\">result = json.dumps(resp.json(),ensure_ascii=False)</span><br><span class=\"line\">#若不指定ensure_ascii=False，输出的是中文的ascii 字符码，而不是真正的中文。</span><br><span class=\"line\">#这是因为json.dumps 序列化时对中文默认使用的ascii编码.想输出真正的中文需要指定ensure_ascii=False：</span><br><span class=\"line\"></span><br><span class=\"line\">file1 = codecs.open(date+&quot;liujiqian.txt&quot;,&apos;a&apos;,&apos;utf-8&apos;)\t</span><br><span class=\"line\">#将获取到的内容写到文件，以指定的编码方式打开文件，这样才能正常写入中文</span><br><span class=\"line\">file1.write(result)</span><br><span class=\"line\">file1.close()</span><br></pre></td></tr></table></figure>\n"},{"title":"Python和微信之获取好友昵称并制作wordcloud","_content":"\n\n\n\n\n最近看到网上有人用Python获取微信的一些信息，感觉挺有意思，对于我一个Python刚入门的人来说，正需要一些代码片段来激起我的兴趣，所以自己也写了一些，废话不多说，直接上代码！！！\n\n```\n\ncoding:utf-8\n微信好友昵称WordCloud\nimport itchat\nimport re\nimport os\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, ImageColorGenerator\nimport numpy as np\nimport PIL.Image as Image\nimport jieba\nimport time\n#以上是我用到的一些库，这些根据个人不同需要安装某些库\n\n#运行到此处会自动生成一个二维码，打开手机微信，扫一扫即可登录\nitchat.login()\t\nfriends = itchat.get_friends(update=True)[0:]\ntList = []\n\n\nfor i in friends:\n\t#用正则表达式过滤掉 span ，class，emoji。NickName表示微信好友的昵称；\n\tsignature = i[\"NickName\"].strip().replace(\"span\",\"\").replace(\"class\",\"\").replace(\"emoji\",\"\")\n\trep = re.compile(\"1f\\d.+\")\n\tsignature = rep.sub(\"\",signature)\n\tprint signature\n\ttList.append(signature)\n\n\n#拼接字符串\ntext = \"\".join(tList)\n\n#jieba分词\nwordlist_jieba = jieba.cut(text,cut_all=True)\nwl_space_split = \" \".join(wordlist_jieba)\n\n#wordcloud\nd = os.path.dirname(__file__)\nalice_coloring = np.array(Image.open(os.path.join(d,\"hot.png\")))\t#设置一个背景图片，文章中会附上\nmy_wordcloud = WordCloud(background_color=\"white\",max_words=2000,mask=alice_coloring,max_font_size=37, random_state=42,\nfont_path=\"./handan.ttf\").generate(wl_space_split)\t\n#此处使用的字体一定是支持中文的字体，当然，如果你确定你好友的昵称都是英文，那么请忽略，字体的路径可以是相对路径，也可以是你的系统字体\n\nimage_colors = ImageColorGenerator(alice_coloring)\nplt.imshow(my_wordcloud.recolor(color_func=image_colors))\nplt.imshow(my_wordcloud)\nplt.axis(\"off\")\nplt.show()\ntime.sleep(3)\nplt.close()\t#图片关闭后将图片发送至手机,保存图片，并发送至手机\nmy_wordcloud.to_file(os.path.join(d, \"wechat_cloud.png\"))\nitchat.send_image(\"wechat_cloud.png\", 'filehelper')\n```\n至此，打开你的手机，进入到文件传输助手，你会收到一张图片，这就是使用微信好友昵称制作的词云，下面附上一张我本人的\n![这里写图片描述](http://img.blog.csdn.net/20170721154128645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170721154156691?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n","source":"_posts/pythonWechatWordCloud.md","raw":"\n---\n\ntitle: Python和微信之获取好友昵称并制作wordcloud\ntags: wordcloud\ncategories: python\n\n---\n\n\n\n\n\n最近看到网上有人用Python获取微信的一些信息，感觉挺有意思，对于我一个Python刚入门的人来说，正需要一些代码片段来激起我的兴趣，所以自己也写了一些，废话不多说，直接上代码！！！\n\n```\n\ncoding:utf-8\n微信好友昵称WordCloud\nimport itchat\nimport re\nimport os\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud, ImageColorGenerator\nimport numpy as np\nimport PIL.Image as Image\nimport jieba\nimport time\n#以上是我用到的一些库，这些根据个人不同需要安装某些库\n\n#运行到此处会自动生成一个二维码，打开手机微信，扫一扫即可登录\nitchat.login()\t\nfriends = itchat.get_friends(update=True)[0:]\ntList = []\n\n\nfor i in friends:\n\t#用正则表达式过滤掉 span ，class，emoji。NickName表示微信好友的昵称；\n\tsignature = i[\"NickName\"].strip().replace(\"span\",\"\").replace(\"class\",\"\").replace(\"emoji\",\"\")\n\trep = re.compile(\"1f\\d.+\")\n\tsignature = rep.sub(\"\",signature)\n\tprint signature\n\ttList.append(signature)\n\n\n#拼接字符串\ntext = \"\".join(tList)\n\n#jieba分词\nwordlist_jieba = jieba.cut(text,cut_all=True)\nwl_space_split = \" \".join(wordlist_jieba)\n\n#wordcloud\nd = os.path.dirname(__file__)\nalice_coloring = np.array(Image.open(os.path.join(d,\"hot.png\")))\t#设置一个背景图片，文章中会附上\nmy_wordcloud = WordCloud(background_color=\"white\",max_words=2000,mask=alice_coloring,max_font_size=37, random_state=42,\nfont_path=\"./handan.ttf\").generate(wl_space_split)\t\n#此处使用的字体一定是支持中文的字体，当然，如果你确定你好友的昵称都是英文，那么请忽略，字体的路径可以是相对路径，也可以是你的系统字体\n\nimage_colors = ImageColorGenerator(alice_coloring)\nplt.imshow(my_wordcloud.recolor(color_func=image_colors))\nplt.imshow(my_wordcloud)\nplt.axis(\"off\")\nplt.show()\ntime.sleep(3)\nplt.close()\t#图片关闭后将图片发送至手机,保存图片，并发送至手机\nmy_wordcloud.to_file(os.path.join(d, \"wechat_cloud.png\"))\nitchat.send_image(\"wechat_cloud.png\", 'filehelper')\n```\n至此，打开你的手机，进入到文件传输助手，你会收到一张图片，这就是使用微信好友昵称制作的词云，下面附上一张我本人的\n![这里写图片描述](http://img.blog.csdn.net/20170721154128645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![这里写图片描述](http://img.blog.csdn.net/20170721154156691?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n","slug":"pythonWechatWordCloud","published":1,"date":"2018-01-24T03:58:33.598Z","updated":"2018-01-24T03:58:33.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4j1000b8e9o8d5mn7mg","content":"<p>最近看到网上有人用Python获取微信的一些信息，感觉挺有意思，对于我一个Python刚入门的人来说，正需要一些代码片段来激起我的兴趣，所以自己也写了一些，废话不多说，直接上代码！！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">coding:utf-8</span><br><span class=\"line\">微信好友昵称WordCloud</span><br><span class=\"line\">import itchat</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from wordcloud import WordCloud, ImageColorGenerator</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import PIL.Image as Image</span><br><span class=\"line\">import jieba</span><br><span class=\"line\">import time</span><br><span class=\"line\">#以上是我用到的一些库，这些根据个人不同需要安装某些库</span><br><span class=\"line\"></span><br><span class=\"line\">#运行到此处会自动生成一个二维码，打开手机微信，扫一扫即可登录</span><br><span class=\"line\">itchat.login()\t</span><br><span class=\"line\">friends = itchat.get_friends(update=True)[0:]</span><br><span class=\"line\">tList = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i in friends:</span><br><span class=\"line\">\t#用正则表达式过滤掉 span ，class，emoji。NickName表示微信好友的昵称；</span><br><span class=\"line\">\tsignature = i[&quot;NickName&quot;].strip().replace(&quot;span&quot;,&quot;&quot;).replace(&quot;class&quot;,&quot;&quot;).replace(&quot;emoji&quot;,&quot;&quot;)</span><br><span class=\"line\">\trep = re.compile(&quot;1f\\d.+&quot;)</span><br><span class=\"line\">\tsignature = rep.sub(&quot;&quot;,signature)</span><br><span class=\"line\">\tprint signature</span><br><span class=\"line\">\ttList.append(signature)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#拼接字符串</span><br><span class=\"line\">text = &quot;&quot;.join(tList)</span><br><span class=\"line\"></span><br><span class=\"line\">#jieba分词</span><br><span class=\"line\">wordlist_jieba = jieba.cut(text,cut_all=True)</span><br><span class=\"line\">wl_space_split = &quot; &quot;.join(wordlist_jieba)</span><br><span class=\"line\"></span><br><span class=\"line\">#wordcloud</span><br><span class=\"line\">d = os.path.dirname(__file__)</span><br><span class=\"line\">alice_coloring = np.array(Image.open(os.path.join(d,&quot;hot.png&quot;)))\t#设置一个背景图片，文章中会附上</span><br><span class=\"line\">my_wordcloud = WordCloud(background_color=&quot;white&quot;,max_words=2000,mask=alice_coloring,max_font_size=37, random_state=42,</span><br><span class=\"line\">font_path=&quot;./handan.ttf&quot;).generate(wl_space_split)\t</span><br><span class=\"line\">#此处使用的字体一定是支持中文的字体，当然，如果你确定你好友的昵称都是英文，那么请忽略，字体的路径可以是相对路径，也可以是你的系统字体</span><br><span class=\"line\"></span><br><span class=\"line\">image_colors = ImageColorGenerator(alice_coloring)</span><br><span class=\"line\">plt.imshow(my_wordcloud.recolor(color_func=image_colors))</span><br><span class=\"line\">plt.imshow(my_wordcloud)</span><br><span class=\"line\">plt.axis(&quot;off&quot;)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">time.sleep(3)</span><br><span class=\"line\">plt.close()\t#图片关闭后将图片发送至手机,保存图片，并发送至手机</span><br><span class=\"line\">my_wordcloud.to_file(os.path.join(d, &quot;wechat_cloud.png&quot;))</span><br><span class=\"line\">itchat.send_image(&quot;wechat_cloud.png&quot;, &apos;filehelper&apos;)</span><br></pre></td></tr></table></figure>\n<p>至此，打开你的手机，进入到文件传输助手，你会收到一张图片，这就是使用微信好友昵称制作的词云，下面附上一张我本人的<br><img src=\"http://img.blog.csdn.net/20170721154128645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170721154156691?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近看到网上有人用Python获取微信的一些信息，感觉挺有意思，对于我一个Python刚入门的人来说，正需要一些代码片段来激起我的兴趣，所以自己也写了一些，废话不多说，直接上代码！！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">coding:utf-8</span><br><span class=\"line\">微信好友昵称WordCloud</span><br><span class=\"line\">import itchat</span><br><span class=\"line\">import re</span><br><span class=\"line\">import os</span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from wordcloud import WordCloud, ImageColorGenerator</span><br><span class=\"line\">import numpy as np</span><br><span class=\"line\">import PIL.Image as Image</span><br><span class=\"line\">import jieba</span><br><span class=\"line\">import time</span><br><span class=\"line\">#以上是我用到的一些库，这些根据个人不同需要安装某些库</span><br><span class=\"line\"></span><br><span class=\"line\">#运行到此处会自动生成一个二维码，打开手机微信，扫一扫即可登录</span><br><span class=\"line\">itchat.login()\t</span><br><span class=\"line\">friends = itchat.get_friends(update=True)[0:]</span><br><span class=\"line\">tList = []</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">for i in friends:</span><br><span class=\"line\">\t#用正则表达式过滤掉 span ，class，emoji。NickName表示微信好友的昵称；</span><br><span class=\"line\">\tsignature = i[&quot;NickName&quot;].strip().replace(&quot;span&quot;,&quot;&quot;).replace(&quot;class&quot;,&quot;&quot;).replace(&quot;emoji&quot;,&quot;&quot;)</span><br><span class=\"line\">\trep = re.compile(&quot;1f\\d.+&quot;)</span><br><span class=\"line\">\tsignature = rep.sub(&quot;&quot;,signature)</span><br><span class=\"line\">\tprint signature</span><br><span class=\"line\">\ttList.append(signature)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#拼接字符串</span><br><span class=\"line\">text = &quot;&quot;.join(tList)</span><br><span class=\"line\"></span><br><span class=\"line\">#jieba分词</span><br><span class=\"line\">wordlist_jieba = jieba.cut(text,cut_all=True)</span><br><span class=\"line\">wl_space_split = &quot; &quot;.join(wordlist_jieba)</span><br><span class=\"line\"></span><br><span class=\"line\">#wordcloud</span><br><span class=\"line\">d = os.path.dirname(__file__)</span><br><span class=\"line\">alice_coloring = np.array(Image.open(os.path.join(d,&quot;hot.png&quot;)))\t#设置一个背景图片，文章中会附上</span><br><span class=\"line\">my_wordcloud = WordCloud(background_color=&quot;white&quot;,max_words=2000,mask=alice_coloring,max_font_size=37, random_state=42,</span><br><span class=\"line\">font_path=&quot;./handan.ttf&quot;).generate(wl_space_split)\t</span><br><span class=\"line\">#此处使用的字体一定是支持中文的字体，当然，如果你确定你好友的昵称都是英文，那么请忽略，字体的路径可以是相对路径，也可以是你的系统字体</span><br><span class=\"line\"></span><br><span class=\"line\">image_colors = ImageColorGenerator(alice_coloring)</span><br><span class=\"line\">plt.imshow(my_wordcloud.recolor(color_func=image_colors))</span><br><span class=\"line\">plt.imshow(my_wordcloud)</span><br><span class=\"line\">plt.axis(&quot;off&quot;)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\">time.sleep(3)</span><br><span class=\"line\">plt.close()\t#图片关闭后将图片发送至手机,保存图片，并发送至手机</span><br><span class=\"line\">my_wordcloud.to_file(os.path.join(d, &quot;wechat_cloud.png&quot;))</span><br><span class=\"line\">itchat.send_image(&quot;wechat_cloud.png&quot;, &apos;filehelper&apos;)</span><br></pre></td></tr></table></figure>\n<p>至此，打开你的手机，进入到文件传输助手，你会收到一张图片，这就是使用微信好友昵称制作的词云，下面附上一张我本人的<br><img src=\"http://img.blog.csdn.net/20170721154128645?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><img src=\"http://img.blog.csdn.net/20170721154156691?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n"},{"date":"2017-11-19T15:20:00.000Z","title":"python爬虫爬取ajax加载的动态内容","_content":"\n\n在使用python爬取网页内容的时候，发现请求到的内容和浏览器开发者工具上看到的不一样，\n经过一番百度，才发现该内容是使用ajax加载的内容：\n![浏览器上看到的数据](http://img.blog.csdn.net/20171231133004429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n![python请求到的数据](http://img.blog.csdn.net/20171231133037220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n两处相差甚远。\n\n最终在这里找到ajax请求的url\n![](http://img.blog.csdn.net/20171231133543138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n使用此地址完美请求到缺失的数据\n![请求到一组json数据](http://img.blog.csdn.net/20171231133956311?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n","source":"_posts/python_pachong.md","raw":"---\n\ndate: 2017-11-19 23:20:00\ntitle: python爬虫爬取ajax加载的动态内容\ntags: python\ncategories: python\n\n---\n\n\n在使用python爬取网页内容的时候，发现请求到的内容和浏览器开发者工具上看到的不一样，\n经过一番百度，才发现该内容是使用ajax加载的内容：\n![浏览器上看到的数据](http://img.blog.csdn.net/20171231133004429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n![python请求到的数据](http://img.blog.csdn.net/20171231133037220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n两处相差甚远。\n\n最终在这里找到ajax请求的url\n![](http://img.blog.csdn.net/20171231133543138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n使用此地址完美请求到缺失的数据\n![请求到一组json数据](http://img.blog.csdn.net/20171231133956311?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n","slug":"python_pachong","published":1,"updated":"2018-01-17T02:29:35.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4jg000f8e9o00m717ux","content":"<p>在使用python爬取网页内容的时候，发现请求到的内容和浏览器开发者工具上看到的不一样，<br>经过一番百度，才发现该内容是使用ajax加载的内容：<br><img src=\"http://img.blog.csdn.net/20171231133004429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"浏览器上看到的数据\"></p>\n<p><img src=\"http://img.blog.csdn.net/20171231133037220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"python请求到的数据\"></p>\n<p>两处相差甚远。</p>\n<p>最终在这里找到ajax请求的url<br><img src=\"http://img.blog.csdn.net/20171231133543138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>使用此地址完美请求到缺失的数据<br><img src=\"http://img.blog.csdn.net/20171231133956311?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"请求到一组json数据\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在使用python爬取网页内容的时候，发现请求到的内容和浏览器开发者工具上看到的不一样，<br>经过一番百度，才发现该内容是使用ajax加载的内容：<br><img src=\"http://img.blog.csdn.net/20171231133004429?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"浏览器上看到的数据\"></p>\n<p><img src=\"http://img.blog.csdn.net/20171231133037220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"python请求到的数据\"></p>\n<p>两处相差甚远。</p>\n<p>最终在这里找到ajax请求的url<br><img src=\"http://img.blog.csdn.net/20171231133543138?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>使用此地址完美请求到缺失的数据<br><img src=\"http://img.blog.csdn.net/20171231133956311?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"请求到一组json数据\"></p>\n"},{"date":"2017-06-06T03:24:29.000Z","title":"nagios监控（二）之监控windows server服务器","_content":"\n**摘要**\n本文介绍了如何使用nagios通过nsclient监控windows主机。\n此次实验环境基于[上篇文章](http://fanming.shop/2017/06/05/centos7InstallNagios/)，监控端在Linux环境下，Windows服务器使用的时windows server 2012。\n\n\n**1. 安装NSClient++**\n访问http://nsclient.org/nscp/ 下载NSClient++，这里我使用的是NSCP-0.4.3.143-x64的msi安装包。下载之后直接安装，过程中会提示输入Nagios监控服务器地址和密码。地址填写正确，密码不用设置。Nagios监控服务器事先在监控Linux服务器时候已经搭建好。\n\n\n**2.配置NSClient++**\n在 NSClient++ 的安装目录打开 nsclient.ini，将监控服务器的IP地址加到 allowed hosts 指令后面。\n![这里写图片描述](http://img.blog.csdn.net/20180125175521714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后检查下12489端口是否正常监听\nnetstat -an | more\n\n因为安装时候需要的模块已经勾选了，所以配置文件中不用再作设置。否则可以通过去掉每个模块前的;来启用该模块。\n\n到这里即完成了Windows Server 2012上的配置。接下来我们设置Nagios监控服务器。\n\n\n**3.Nagios监控服务器设置**\nvi /usr/local/nagios/etc/nagios.cfg\n搜索找到：\nDefinitions for monitoring a Windows machine\ncfg_file=/usr/local/nagios/etc/objects/windows.cfg\n将第二行的#去掉打开Nagios监控的Windows模块，然后保存。\n![这里写图片描述](http://img.blog.csdn.net/20180125180434354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n接着编辑\n找到并设置监控的服务器：\n设置被监控主机名和被监控的Windows服务器地址。\n**此地址为Linux服务端的ip地址**\n```\nvi /usr/local/nagios/etc/objects/windows.cfg\ndefine host{\nuse windows-server ; Inherit default values from a template\nhost_name winserver ; The name we're giving to this host\nalias My Windows Server ; A longer name associated with the host\naddress 192.168.0.2 ; IP address of the host\n}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180126090631955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n接下来搜索各种监控的服务并设置：\n\n```\n#监控NSClient版本。\nCreate a service for monitoring the version of NSCLient++ that is installed\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description NSClient++ Version\ncheck_command check_nt!CLIENTVERSION\n}\n\n#监控服务器在线时间。\nCreate a service for monitoring the uptime of the server\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description Uptime\ncheck_command check_nt!UPTIME\n}\n\n\n#监控服务器CPU负载。\nCreate a service for monitoring CPU load\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description CPU Load\ncheck_command check_nt!CPULOAD!-l 20,30,50\n}\n\n\n#监控服务器的内存占用。\n Create a service for monitoring memory usage\n Change the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description Memory Usage\ncheck_command check_nt!MEMUSE!-w 80 -c 90\n}\n\n\n#监控系统C盘的磁盘占用。\nCreate a service for monitoring C:\\ disk usage\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description C:\\ Drive Space\ncheck_command check_nt!USEDDISKSPACE!-l c -w 80 -c 90\n}\n```\n\n进入目录 /usr/local/nagios/libexec/\n在nagios监控端验证是否可以监控到windows主机，用命令./check_nt -H 192.168.13.132 -p 12489 -v UPTIME可以检测到Windows服务器已经启动的时长，也表示可以从Windows服务器拿到数据了。\n![这里写图片描述](http://img.blog.csdn.net/20180126093055560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n现在就可以登录到nagios的web界面，查看你的监控信息了\n![这里写图片描述](http://img.blog.csdn.net/20180126093303518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n","source":"_posts/windowsNagios.md","raw":"---\ndate: 2017-06-06 11:24:29\ntitle: nagios监控（二）之监控windows server服务器\ntags: [nagios,windows,linux]\ncategories: nagios\n\n---\n\n**摘要**\n本文介绍了如何使用nagios通过nsclient监控windows主机。\n此次实验环境基于[上篇文章](http://fanming.shop/2017/06/05/centos7InstallNagios/)，监控端在Linux环境下，Windows服务器使用的时windows server 2012。\n\n\n**1. 安装NSClient++**\n访问http://nsclient.org/nscp/ 下载NSClient++，这里我使用的是NSCP-0.4.3.143-x64的msi安装包。下载之后直接安装，过程中会提示输入Nagios监控服务器地址和密码。地址填写正确，密码不用设置。Nagios监控服务器事先在监控Linux服务器时候已经搭建好。\n\n\n**2.配置NSClient++**\n在 NSClient++ 的安装目录打开 nsclient.ini，将监控服务器的IP地址加到 allowed hosts 指令后面。\n![这里写图片描述](http://img.blog.csdn.net/20180125175521714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后检查下12489端口是否正常监听\nnetstat -an | more\n\n因为安装时候需要的模块已经勾选了，所以配置文件中不用再作设置。否则可以通过去掉每个模块前的;来启用该模块。\n\n到这里即完成了Windows Server 2012上的配置。接下来我们设置Nagios监控服务器。\n\n\n**3.Nagios监控服务器设置**\nvi /usr/local/nagios/etc/nagios.cfg\n搜索找到：\nDefinitions for monitoring a Windows machine\ncfg_file=/usr/local/nagios/etc/objects/windows.cfg\n将第二行的#去掉打开Nagios监控的Windows模块，然后保存。\n![这里写图片描述](http://img.blog.csdn.net/20180125180434354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n接着编辑\n找到并设置监控的服务器：\n设置被监控主机名和被监控的Windows服务器地址。\n**此地址为Linux服务端的ip地址**\n```\nvi /usr/local/nagios/etc/objects/windows.cfg\ndefine host{\nuse windows-server ; Inherit default values from a template\nhost_name winserver ; The name we're giving to this host\nalias My Windows Server ; A longer name associated with the host\naddress 192.168.0.2 ; IP address of the host\n}\n```\n![这里写图片描述](http://img.blog.csdn.net/20180126090631955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n接下来搜索各种监控的服务并设置：\n\n```\n#监控NSClient版本。\nCreate a service for monitoring the version of NSCLient++ that is installed\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description NSClient++ Version\ncheck_command check_nt!CLIENTVERSION\n}\n\n#监控服务器在线时间。\nCreate a service for monitoring the uptime of the server\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description Uptime\ncheck_command check_nt!UPTIME\n}\n\n\n#监控服务器CPU负载。\nCreate a service for monitoring CPU load\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description CPU Load\ncheck_command check_nt!CPULOAD!-l 20,30,50\n}\n\n\n#监控服务器的内存占用。\n Create a service for monitoring memory usage\n Change the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description Memory Usage\ncheck_command check_nt!MEMUSE!-w 80 -c 90\n}\n\n\n#监控系统C盘的磁盘占用。\nCreate a service for monitoring C:\\ disk usage\nChange the host_name to match the name of the host you defined above\n\ndefine service{\nuse generic-service\nhost_name winserver\nservice_description C:\\ Drive Space\ncheck_command check_nt!USEDDISKSPACE!-l c -w 80 -c 90\n}\n```\n\n进入目录 /usr/local/nagios/libexec/\n在nagios监控端验证是否可以监控到windows主机，用命令./check_nt -H 192.168.13.132 -p 12489 -v UPTIME可以检测到Windows服务器已经启动的时长，也表示可以从Windows服务器拿到数据了。\n![这里写图片描述](http://img.blog.csdn.net/20180126093055560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n现在就可以登录到nagios的web界面，查看你的监控信息了\n![这里写图片描述](http://img.blog.csdn.net/20180126093303518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n","slug":"windowsNagios","published":1,"updated":"2018-01-26T05:38:47.087Z","_id":"cjcv9l4jv000h8e9o0ain2kac","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>摘要</strong><br>本文介绍了如何使用nagios通过nsclient监控windows主机。<br>此次实验环境基于<a href=\"http://fanming.shop/2017/06/05/centos7InstallNagios/\">上篇文章</a>，监控端在Linux环境下，Windows服务器使用的时windows server 2012。</p>\n<p><strong>1. 安装NSClient++</strong><br>访问<a href=\"http://nsclient.org/nscp/\" target=\"_blank\" rel=\"noopener\">http://nsclient.org/nscp/</a> 下载NSClient++，这里我使用的是NSCP-0.4.3.143-x64的msi安装包。下载之后直接安装，过程中会提示输入Nagios监控服务器地址和密码。地址填写正确，密码不用设置。Nagios监控服务器事先在监控Linux服务器时候已经搭建好。</p>\n<p><strong>2.配置NSClient++</strong><br>在 NSClient++ 的安装目录打开 nsclient.ini，将监控服务器的IP地址加到 allowed hosts 指令后面。<br><img src=\"http://img.blog.csdn.net/20180125175521714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后检查下12489端口是否正常监听<br>netstat -an | more</p>\n<p>因为安装时候需要的模块已经勾选了，所以配置文件中不用再作设置。否则可以通过去掉每个模块前的;来启用该模块。</p>\n<p>到这里即完成了Windows Server 2012上的配置。接下来我们设置Nagios监控服务器。</p>\n<p><strong>3.Nagios监控服务器设置</strong><br>vi /usr/local/nagios/etc/nagios.cfg<br>搜索找到：<br>Definitions for monitoring a Windows machine<br>cfg_file=/usr/local/nagios/etc/objects/windows.cfg<br>将第二行的#去掉打开Nagios监控的Windows模块，然后保存。<br><img src=\"http://img.blog.csdn.net/20180125180434354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>接着编辑<br>找到并设置监控的服务器：<br>设置被监控主机名和被监控的Windows服务器地址。<br><strong>此地址为Linux服务端的ip地址</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nagios/etc/objects/windows.cfg</span><br><span class=\"line\">define host&#123;</span><br><span class=\"line\">use windows-server ; Inherit default values from a template</span><br><span class=\"line\">host_name winserver ; The name we&apos;re giving to this host</span><br><span class=\"line\">alias My Windows Server ; A longer name associated with the host</span><br><span class=\"line\">address 192.168.0.2 ; IP address of the host</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180126090631955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>接下来搜索各种监控的服务并设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#监控NSClient版本。</span><br><span class=\"line\">Create a service for monitoring the version of NSCLient++ that is installed</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description NSClient++ Version</span><br><span class=\"line\">check_command check_nt!CLIENTVERSION</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#监控服务器在线时间。</span><br><span class=\"line\">Create a service for monitoring the uptime of the server</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description Uptime</span><br><span class=\"line\">check_command check_nt!UPTIME</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#监控服务器CPU负载。</span><br><span class=\"line\">Create a service for monitoring CPU load</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description CPU Load</span><br><span class=\"line\">check_command check_nt!CPULOAD!-l 20,30,50</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#监控服务器的内存占用。</span><br><span class=\"line\"> Create a service for monitoring memory usage</span><br><span class=\"line\"> Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description Memory Usage</span><br><span class=\"line\">check_command check_nt!MEMUSE!-w 80 -c 90</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#监控系统C盘的磁盘占用。</span><br><span class=\"line\">Create a service for monitoring C:\\ disk usage</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description C:\\ Drive Space</span><br><span class=\"line\">check_command check_nt!USEDDISKSPACE!-l c -w 80 -c 90</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入目录 /usr/local/nagios/libexec/<br>在nagios监控端验证是否可以监控到windows主机，用命令./check_nt -H 192.168.13.132 -p 12489 -v UPTIME可以检测到Windows服务器已经启动的时长，也表示可以从Windows服务器拿到数据了。<br><img src=\"http://img.blog.csdn.net/20180126093055560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>现在就可以登录到nagios的web界面，查看你的监控信息了<br><img src=\"http://img.blog.csdn.net/20180126093303518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>摘要</strong><br>本文介绍了如何使用nagios通过nsclient监控windows主机。<br>此次实验环境基于<a href=\"http://fanming.shop/2017/06/05/centos7InstallNagios/\">上篇文章</a>，监控端在Linux环境下，Windows服务器使用的时windows server 2012。</p>\n<p><strong>1. 安装NSClient++</strong><br>访问<a href=\"http://nsclient.org/nscp/\" target=\"_blank\" rel=\"noopener\">http://nsclient.org/nscp/</a> 下载NSClient++，这里我使用的是NSCP-0.4.3.143-x64的msi安装包。下载之后直接安装，过程中会提示输入Nagios监控服务器地址和密码。地址填写正确，密码不用设置。Nagios监控服务器事先在监控Linux服务器时候已经搭建好。</p>\n<p><strong>2.配置NSClient++</strong><br>在 NSClient++ 的安装目录打开 nsclient.ini，将监控服务器的IP地址加到 allowed hosts 指令后面。<br><img src=\"http://img.blog.csdn.net/20180125175521714?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后检查下12489端口是否正常监听<br>netstat -an | more</p>\n<p>因为安装时候需要的模块已经勾选了，所以配置文件中不用再作设置。否则可以通过去掉每个模块前的;来启用该模块。</p>\n<p>到这里即完成了Windows Server 2012上的配置。接下来我们设置Nagios监控服务器。</p>\n<p><strong>3.Nagios监控服务器设置</strong><br>vi /usr/local/nagios/etc/nagios.cfg<br>搜索找到：<br>Definitions for monitoring a Windows machine<br>cfg_file=/usr/local/nagios/etc/objects/windows.cfg<br>将第二行的#去掉打开Nagios监控的Windows模块，然后保存。<br><img src=\"http://img.blog.csdn.net/20180125180434354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>接着编辑<br>找到并设置监控的服务器：<br>设置被监控主机名和被监控的Windows服务器地址。<br><strong>此地址为Linux服务端的ip地址</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nagios/etc/objects/windows.cfg</span><br><span class=\"line\">define host&#123;</span><br><span class=\"line\">use windows-server ; Inherit default values from a template</span><br><span class=\"line\">host_name winserver ; The name we&apos;re giving to this host</span><br><span class=\"line\">alias My Windows Server ; A longer name associated with the host</span><br><span class=\"line\">address 192.168.0.2 ; IP address of the host</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20180126090631955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>接下来搜索各种监控的服务并设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#监控NSClient版本。</span><br><span class=\"line\">Create a service for monitoring the version of NSCLient++ that is installed</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description NSClient++ Version</span><br><span class=\"line\">check_command check_nt!CLIENTVERSION</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#监控服务器在线时间。</span><br><span class=\"line\">Create a service for monitoring the uptime of the server</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description Uptime</span><br><span class=\"line\">check_command check_nt!UPTIME</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#监控服务器CPU负载。</span><br><span class=\"line\">Create a service for monitoring CPU load</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description CPU Load</span><br><span class=\"line\">check_command check_nt!CPULOAD!-l 20,30,50</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#监控服务器的内存占用。</span><br><span class=\"line\"> Create a service for monitoring memory usage</span><br><span class=\"line\"> Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description Memory Usage</span><br><span class=\"line\">check_command check_nt!MEMUSE!-w 80 -c 90</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#监控系统C盘的磁盘占用。</span><br><span class=\"line\">Create a service for monitoring C:\\ disk usage</span><br><span class=\"line\">Change the host_name to match the name of the host you defined above</span><br><span class=\"line\"></span><br><span class=\"line\">define service&#123;</span><br><span class=\"line\">use generic-service</span><br><span class=\"line\">host_name winserver</span><br><span class=\"line\">service_description C:\\ Drive Space</span><br><span class=\"line\">check_command check_nt!USEDDISKSPACE!-l c -w 80 -c 90</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入目录 /usr/local/nagios/libexec/<br>在nagios监控端验证是否可以监控到windows主机，用命令./check_nt -H 192.168.13.132 -p 12489 -v UPTIME可以检测到Windows服务器已经启动的时长，也表示可以从Windows服务器拿到数据了。<br><img src=\"http://img.blog.csdn.net/20180126093055560?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>现在就可以登录到nagios的web界面，查看你的监控信息了<br><img src=\"http://img.blog.csdn.net/20180126093303518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMzU2MjYyNQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n"},{"date":"2017-03-08T07:50:23.000Z","title":"centos环境下使用uwsgi&nginx部署flask","_content":"\n\n\n\n 1. 安装Python虚拟环境\n\t\t在centos中，系统已经集成了Python环境，直接可以使用，不用手动安装。\n\n\t\t\t1）pip install virtualenv             进行这一步要保证pip可以使用\n\t\t\t若在此报错gcc，则需要安装python-devel\n\t\t\t2）virtualenv   name    ——————创建虚拟环境\n\t\t\t3）source name/activate ————激活虚拟环境\n\t\t\t4）根据flask项目中需要的Python包安装\n\n 2. 安装uwsgi\n\n\t\t1）pip install uwsgi\n\t\t2）在项目的根目录创建文件名为config.ini文件，用于启动uwsgi\n\t```\n\t[uwsgi]\n\t\n\tsocket = 127.0.0.1:5001     //启动程序时所使用的地址和端口，通常在本地运行flask项目，\n\t                            //地址和端口是127.0.0.1:5000,\n\t                            //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目，\n\t                            //也就是说启动了uwsgi，也就启动了项目。\n\tchdir = /root/pyenv/AjaxExample    //项目目录\n\t\n\twsgi-file = run.py      //flask程序的启动文件，通常在本地是通过运行  \n\t                        //python run.py 来启动项目的\n\t                        \n\tcallable = app      //程序内启用的application变量名\n\t\n\tprocesses = 4     //处理器个数\n\t\n\tthreads = 2     //线程个数\n\t\n\tstats = 127.0.0.1:9191      //获取uwsgi统计信息的服务地址 用于和nginx通信\n\t```\n\n 3. 安装nginx\n\n\t\t\t*nginx的一些命令\n\t\t\t*启动： nginx\n\t\t\t*停止： nginx -s -stop\n\t\t\t*强制停止： pkill -9 nginx\n\t\t\t*查看nginx是否应用配置文件: nginx -t\n\t\t\t*查看版本： nginx -v\n\t\t\t\n\t\t 1）nginx 可以使用yum直接安装\n\t\t\t\t yum install yum-fastestmirror————安装源\n\t\t\t\t yum install nginx\n\t\t\t\t \n\t\t 2）配置nginx\n\t\t\t\t 配置文件默认在/etc/nginx/nginx.conf\n\t\t\t\t \n\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;     //错误日志\npid /run/nginx.pid;\ninclude /usr/share/nginx/modules/*.conf;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen       80 default_server;  //web服务端口\n        listen       [::]:80 default_server;  \n        server_name  39.106.56.137;  //公网ip\n        root         /usr/share/nginx/html;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n        location / {\n\t\tinclude        uwsgi_params;\n                uwsgi_pass     127.0.0.1:5001;    //需要和uwsgi的配置文件里socket项的地址\n                                                  //相同,否则无法让uwsgi接收到请求。\n                uwsgi_param UWSGI_PYHOME /root/pyenv;  //python的位置(虚拟环境下)\n                uwsgi_param UWSGI_CHDIR /root/pyenv/AjaxExample;   //项目根目录\n                uwsgi_param UWSGI_SCRIPT run:app;    //启动项目的主程序(在本地上运行\n                                                     //这个主程序可以在flask内置的\n                                                     //服务器上访问你的项目)\n        }\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n\n```\n\n 至此，各项配置已经完成，不出意外的话，你就可以在浏览器中访问你的网站了\n","source":"_posts/部署flask.md","raw":"\n---\n\ndate: 2017-3-8 15:50:23\ntitle: centos环境下使用uwsgi&nginx部署flask\ntags: flask\ncategories: linux\n\n---\n\n\n\n\n 1. 安装Python虚拟环境\n\t\t在centos中，系统已经集成了Python环境，直接可以使用，不用手动安装。\n\n\t\t\t1）pip install virtualenv             进行这一步要保证pip可以使用\n\t\t\t若在此报错gcc，则需要安装python-devel\n\t\t\t2）virtualenv   name    ——————创建虚拟环境\n\t\t\t3）source name/activate ————激活虚拟环境\n\t\t\t4）根据flask项目中需要的Python包安装\n\n 2. 安装uwsgi\n\n\t\t1）pip install uwsgi\n\t\t2）在项目的根目录创建文件名为config.ini文件，用于启动uwsgi\n\t```\n\t[uwsgi]\n\t\n\tsocket = 127.0.0.1:5001     //启动程序时所使用的地址和端口，通常在本地运行flask项目，\n\t                            //地址和端口是127.0.0.1:5000,\n\t                            //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目，\n\t                            //也就是说启动了uwsgi，也就启动了项目。\n\tchdir = /root/pyenv/AjaxExample    //项目目录\n\t\n\twsgi-file = run.py      //flask程序的启动文件，通常在本地是通过运行  \n\t                        //python run.py 来启动项目的\n\t                        \n\tcallable = app      //程序内启用的application变量名\n\t\n\tprocesses = 4     //处理器个数\n\t\n\tthreads = 2     //线程个数\n\t\n\tstats = 127.0.0.1:9191      //获取uwsgi统计信息的服务地址 用于和nginx通信\n\t```\n\n 3. 安装nginx\n\n\t\t\t*nginx的一些命令\n\t\t\t*启动： nginx\n\t\t\t*停止： nginx -s -stop\n\t\t\t*强制停止： pkill -9 nginx\n\t\t\t*查看nginx是否应用配置文件: nginx -t\n\t\t\t*查看版本： nginx -v\n\t\t\t\n\t\t 1）nginx 可以使用yum直接安装\n\t\t\t\t yum install yum-fastestmirror————安装源\n\t\t\t\t yum install nginx\n\t\t\t\t \n\t\t 2）配置nginx\n\t\t\t\t 配置文件默认在/etc/nginx/nginx.conf\n\t\t\t\t \n\n```\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;     //错误日志\npid /run/nginx.pid;\ninclude /usr/share/nginx/modules/*.conf;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log  /var/log/nginx/access.log  main;\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen       80 default_server;  //web服务端口\n        listen       [::]:80 default_server;  \n        server_name  39.106.56.137;  //公网ip\n        root         /usr/share/nginx/html;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n        location / {\n\t\tinclude        uwsgi_params;\n                uwsgi_pass     127.0.0.1:5001;    //需要和uwsgi的配置文件里socket项的地址\n                                                  //相同,否则无法让uwsgi接收到请求。\n                uwsgi_param UWSGI_PYHOME /root/pyenv;  //python的位置(虚拟环境下)\n                uwsgi_param UWSGI_CHDIR /root/pyenv/AjaxExample;   //项目根目录\n                uwsgi_param UWSGI_SCRIPT run:app;    //启动项目的主程序(在本地上运行\n                                                     //这个主程序可以在flask内置的\n                                                     //服务器上访问你的项目)\n        }\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n}\n\n```\n\n 至此，各项配置已经完成，不出意外的话，你就可以在浏览器中访问你的网站了\n","slug":"部署flask","published":1,"updated":"2018-01-24T01:52:18.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcv9l4kd000l8e9oysllkkxh","content":"<ol>\n<li><p>安装Python虚拟环境</p>\n<pre><code>在centos中，系统已经集成了Python环境，直接可以使用，不用手动安装。\n\n    1）pip install virtualenv             进行这一步要保证pip可以使用\n    若在此报错gcc，则需要安装python-devel\n    2）virtualenv   name    ——————创建虚拟环境\n    3）source name/activate ————激活虚拟环境\n    4）根据flask项目中需要的Python包安装\n</code></pre></li>\n<li><p>安装uwsgi</p>\n<pre><code>1）pip install uwsgi\n2）在项目的根目录创建文件名为config.ini文件，用于启动uwsgi\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\"></span><br><span class=\"line\">socket = 127.0.0.1:5001     //启动程序时所使用的地址和端口，通常在本地运行flask项目，</span><br><span class=\"line\">                            //地址和端口是127.0.0.1:5000,</span><br><span class=\"line\">                            //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目，</span><br><span class=\"line\">                            //也就是说启动了uwsgi，也就启动了项目。</span><br><span class=\"line\">chdir = /root/pyenv/AjaxExample    //项目目录</span><br><span class=\"line\"></span><br><span class=\"line\">wsgi-file = run.py      //flask程序的启动文件，通常在本地是通过运行  </span><br><span class=\"line\">                        //python run.py 来启动项目的</span><br><span class=\"line\">                        </span><br><span class=\"line\">callable = app      //程序内启用的application变量名</span><br><span class=\"line\"></span><br><span class=\"line\">processes = 4     //处理器个数</span><br><span class=\"line\"></span><br><span class=\"line\">threads = 2     //线程个数</span><br><span class=\"line\"></span><br><span class=\"line\">stats = 127.0.0.1:9191      //获取uwsgi统计信息的服务地址 用于和nginx通信</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nginx</p>\n<pre><code>   *nginx的一些命令\n   *启动： nginx\n   *停止： nginx -s -stop\n   *强制停止： pkill -9 nginx\n   *查看nginx是否应用配置文件: nginx -t\n   *查看版本： nginx -v\n\n1）nginx 可以使用yum直接安装\n        yum install yum-fastestmirror————安装源\n        yum install nginx\n\n2）配置nginx\n        配置文件默认在/etc/nginx/nginx.conf\n</code></pre></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;     //错误日志</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;  //web服务端口</span><br><span class=\"line\">        listen       [::]:80 default_server;  </span><br><span class=\"line\">        server_name  39.106.56.137;  //公网ip</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">\t\tinclude        uwsgi_params;</span><br><span class=\"line\">                uwsgi_pass     127.0.0.1:5001;    //需要和uwsgi的配置文件里socket项的地址</span><br><span class=\"line\">                                                  //相同,否则无法让uwsgi接收到请求。</span><br><span class=\"line\">                uwsgi_param UWSGI_PYHOME /root/pyenv;  //python的位置(虚拟环境下)</span><br><span class=\"line\">                uwsgi_param UWSGI_CHDIR /root/pyenv/AjaxExample;   //项目根目录</span><br><span class=\"line\">                uwsgi_param UWSGI_SCRIPT run:app;    //启动项目的主程序(在本地上运行</span><br><span class=\"line\">                                                     //这个主程序可以在flask内置的</span><br><span class=\"line\">                                                     //服务器上访问你的项目)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 至此，各项配置已经完成，不出意外的话，你就可以在浏览器中访问你的网站了</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>安装Python虚拟环境</p>\n<pre><code>在centos中，系统已经集成了Python环境，直接可以使用，不用手动安装。\n\n    1）pip install virtualenv             进行这一步要保证pip可以使用\n    若在此报错gcc，则需要安装python-devel\n    2）virtualenv   name    ——————创建虚拟环境\n    3）source name/activate ————激活虚拟环境\n    4）根据flask项目中需要的Python包安装\n</code></pre></li>\n<li><p>安装uwsgi</p>\n<pre><code>1）pip install uwsgi\n2）在项目的根目录创建文件名为config.ini文件，用于启动uwsgi\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\"></span><br><span class=\"line\">socket = 127.0.0.1:5001     //启动程序时所使用的地址和端口，通常在本地运行flask项目，</span><br><span class=\"line\">                            //地址和端口是127.0.0.1:5000,</span><br><span class=\"line\">                            //不过在服务器上是通过uwsgi设置端口，通过uwsgi来启动项目，</span><br><span class=\"line\">                            //也就是说启动了uwsgi，也就启动了项目。</span><br><span class=\"line\">chdir = /root/pyenv/AjaxExample    //项目目录</span><br><span class=\"line\"></span><br><span class=\"line\">wsgi-file = run.py      //flask程序的启动文件，通常在本地是通过运行  </span><br><span class=\"line\">                        //python run.py 来启动项目的</span><br><span class=\"line\">                        </span><br><span class=\"line\">callable = app      //程序内启用的application变量名</span><br><span class=\"line\"></span><br><span class=\"line\">processes = 4     //处理器个数</span><br><span class=\"line\"></span><br><span class=\"line\">threads = 2     //线程个数</span><br><span class=\"line\"></span><br><span class=\"line\">stats = 127.0.0.1:9191      //获取uwsgi统计信息的服务地址 用于和nginx通信</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装nginx</p>\n<pre><code>   *nginx的一些命令\n   *启动： nginx\n   *停止： nginx -s -stop\n   *强制停止： pkill -9 nginx\n   *查看nginx是否应用配置文件: nginx -t\n   *查看版本： nginx -v\n\n1）nginx 可以使用yum直接安装\n        yum install yum-fastestmirror————安装源\n        yum install nginx\n\n2）配置nginx\n        配置文件默认在/etc/nginx/nginx.conf\n</code></pre></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx;</span><br><span class=\"line\">worker_processes auto;</span><br><span class=\"line\">error_log /var/log/nginx/error.log;     //错误日志</span><br><span class=\"line\">pid /run/nginx.pid;</span><br><span class=\"line\">include /usr/share/nginx/modules/*.conf;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections 1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class=\"line\">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class=\"line\">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\">    sendfile            on;</span><br><span class=\"line\">    tcp_nopush          on;</span><br><span class=\"line\">    tcp_nodelay         on;</span><br><span class=\"line\">    keepalive_timeout   65;</span><br><span class=\"line\">    types_hash_max_size 2048;</span><br><span class=\"line\">    include             /etc/nginx/mime.types;</span><br><span class=\"line\">    default_type        application/octet-stream;</span><br><span class=\"line\">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class=\"line\">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class=\"line\">    # for more information.</span><br><span class=\"line\">    include /etc/nginx/conf.d/*.conf;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80 default_server;  //web服务端口</span><br><span class=\"line\">        listen       [::]:80 default_server;  </span><br><span class=\"line\">        server_name  39.106.56.137;  //公网ip</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\">        # Load configuration files for the default server block.</span><br><span class=\"line\">        include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">\t\tinclude        uwsgi_params;</span><br><span class=\"line\">                uwsgi_pass     127.0.0.1:5001;    //需要和uwsgi的配置文件里socket项的地址</span><br><span class=\"line\">                                                  //相同,否则无法让uwsgi接收到请求。</span><br><span class=\"line\">                uwsgi_param UWSGI_PYHOME /root/pyenv;  //python的位置(虚拟环境下)</span><br><span class=\"line\">                uwsgi_param UWSGI_CHDIR /root/pyenv/AjaxExample;   //项目根目录</span><br><span class=\"line\">                uwsgi_param UWSGI_SCRIPT run:app;    //启动项目的主程序(在本地上运行</span><br><span class=\"line\">                                                     //这个主程序可以在flask内置的</span><br><span class=\"line\">                                                     //服务器上访问你的项目)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 404 /404.html;</span><br><span class=\"line\">            location = /40x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">            location = /50x.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 至此，各项配置已经完成，不出意外的话，你就可以在浏览器中访问你的网站了</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjcv9l4fm00018e9ok9fb8nak","category_id":"cjcv9l4h000048e9o3hhavjga","_id":"cjcv9l4k0000i8e9o25sv5qqz"},{"post_id":"cjcv9l4gm00038e9o7ics29ql","category_id":"cjcv9l4j7000c8e9o3j9g2ii6","_id":"cjcv9l4kp000p8e9o9q7x3ox6"},{"post_id":"cjcv9l4kd000l8e9oysllkkxh","category_id":"cjcv9l4h000048e9o3hhavjga","_id":"cjcv9l4kt000r8e9ob0gky2aj"},{"post_id":"cjcv9l4hn00078e9oz2na0dl5","category_id":"cjcv9l4h000048e9o3hhavjga","_id":"cjcv9l4l2000u8e9ock7o6gbe"},{"post_id":"cjcv9l4i000098e9ofxinvdsz","category_id":"cjcv9l4ko000o8e9ot6mivhlg","_id":"cjcv9l4l5000y8e9o0yr16hk3"},{"post_id":"cjcv9l4j1000b8e9o8d5mn7mg","category_id":"cjcv9l4ko000o8e9ot6mivhlg","_id":"cjcv9l4lf00128e9ow29x6pk8"},{"post_id":"cjcv9l4jg000f8e9o00m717ux","category_id":"cjcv9l4ko000o8e9ot6mivhlg","_id":"cjcv9l4lo00158e9oaseiejpr"},{"post_id":"cjcv9l4jv000h8e9o0ain2kac","category_id":"cjcv9l4lf00118e9ozarxgfn4","_id":"cjcv9l4ly00188e9otw17n2mq"}],"PostTag":[{"post_id":"cjcv9l4fm00018e9ok9fb8nak","tag_id":"cjcv9l4hf00058e9o9drwyv36","_id":"cjcv9l4kk000m8e9ol63jxcy3"},{"post_id":"cjcv9l4fm00018e9ok9fb8nak","tag_id":"cjcv9l4j8000d8e9oika1dbky","_id":"cjcv9l4kn000n8e9ouepxuv0l"},{"post_id":"cjcv9l4gm00038e9o7ics29ql","tag_id":"cjcv9l4k5000k8e9oehboh9xe","_id":"cjcv9l4l3000v8e9o78mirnzo"},{"post_id":"cjcv9l4gm00038e9o7ics29ql","tag_id":"cjcv9l4hf00058e9o9drwyv36","_id":"cjcv9l4l4000w8e9ozxeg53zy"},{"post_id":"cjcv9l4hn00078e9oz2na0dl5","tag_id":"cjcv9l4hf00058e9o9drwyv36","_id":"cjcv9l4la00108e9oexx1rwg7"},{"post_id":"cjcv9l4i000098e9ofxinvdsz","tag_id":"cjcv9l4l5000z8e9oqquxt9s4","_id":"cjcv9l4lj00148e9o8502965q"},{"post_id":"cjcv9l4j1000b8e9o8d5mn7mg","tag_id":"cjcv9l4li00138e9od1pwleb1","_id":"cjcv9l4lx00178e9ocgnam96t"},{"post_id":"cjcv9l4jg000f8e9o00m717ux","tag_id":"cjcv9l4ls00168e9otpxqzdia","_id":"cjcv9l4m2001a8e9o3ggj054i"},{"post_id":"cjcv9l4jv000h8e9o0ain2kac","tag_id":"cjcv9l4j8000d8e9oika1dbky","_id":"cjcv9l4m8001c8e9olmlv3e4i"},{"post_id":"cjcv9l4jv000h8e9o0ain2kac","tag_id":"cjcv9l4m100198e9od1nn9kv0","_id":"cjcv9l4m8001d8e9ofo5qvgrp"},{"post_id":"cjcv9l4jv000h8e9o0ain2kac","tag_id":"cjcv9l4hf00058e9o9drwyv36","_id":"cjcv9l4m9001e8e9o5cgvnl7t"},{"post_id":"cjcv9l4kd000l8e9oysllkkxh","tag_id":"cjcv9l4m6001b8e9of43t8qxi","_id":"cjcv9l4mc001f8e9o41qjskiz"}],"Tag":[{"name":"linux","_id":"cjcv9l4hf00058e9o9drwyv36"},{"name":"nagios","_id":"cjcv9l4j8000d8e9oika1dbky"},{"name":"hexo","_id":"cjcv9l4k5000k8e9oehboh9xe"},{"name":"scarpy","_id":"cjcv9l4l5000z8e9oqquxt9s4"},{"name":"wordcloud","_id":"cjcv9l4li00138e9od1pwleb1"},{"name":"python","_id":"cjcv9l4ls00168e9otpxqzdia"},{"name":"windows","_id":"cjcv9l4m100198e9od1nn9kv0"},{"name":"flask","_id":"cjcv9l4m6001b8e9of43t8qxi"}]}}